import java.io.BufferedReader;
import java.io.FileReader;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Scanner;

public class Marketplace {
    Scanner scanner = new Scanner(System.in);

    public static ArrayList<Store> storeArrayList = new ArrayList<>();
    public static ArrayList<User> userArrayList = new ArrayList<>();
    public static ArrayList<Customer> CustomerArrayList = new ArrayList<>();
    public static ArrayList<Seller> SellerArrayList = new ArrayList<>();
    public static ArrayList<Product> productArrayList = new ArrayList<>();

    // begin createAccount method
    public static User createAccount() {
        User user = new User(null, null, null, true);
        String username = "";
        String password = "";
        String email = "";
        int userCustomer = 0;

        // create email
        boolean invalidEmail = true;
        while (invalidEmail) {
            System.out.println("Please enter your email.");
            email = scanner.nextLine();
            if (email == null) {
                System.out.println("Email cannot be empty.");
            } else {
                boolean hasAtSign = false;
                boolean hasDot = false;

                for (int i = 0; i < email.length(); i++) { // traverse length of given username
                    if (email.charAt(i) == 64) { // check for an @ sign, referencing an ascii table
                        hasAtSign = true;
                    }
                    if (hasAtSign && (email.charAt(i) == 46)) { // check for a .extension, referencing an ascii table
                        hasDot = true;
                    }
                }

                if (hasAtSign && hasDot) {
                    boolean alreadyTaken = false;
                    for (int i = 0; i < userArrayList.size(); i++) {
                        if (email.equals(userArrayList.get(i).getEmail())) {
                            alreadyTaken = true;
                        }
                    }

                    if (alreadyTaken) {
                        System.out.println("It appears that email is already being used.\nPlease try a different email. :(");
                    } else {
                        System.out.println("Thank you for inputing a valid email.\n"); // if both true, email is good
                        invalidEmail = false;
                    }
                } else if (hasAtSign) {
                    System.out.println("Email is missing a valid extension at the end.\nExample: .com"); // missing .ext
                } else if (hasDot) {
                    System.out.println("Email is missing an @"); // missing .ext
                } else {
                    System.out.println("Email is improperly formatted.\nPlease ensure it includes an @ sign, and a valid extension (such as .com) at the end."); // just bad format
                }
            }
        }
        user.setEmail(email);

        // create username
        boolean invalidUsername = true;
        while (invalidUsername) {
            boolean hasLetter = false;
            boolean hasNumber = false;
            System.out.println("Please create a username. Username must contain at least one letter and one number.");
            username = scanner.nextLine();
            for (int i = 0; i < username.length(); i++) { // traverse length of given username
                if (Character.isDigit(username.charAt(i))) { // check for at least one number
                    hasNumber = true;
                }
                if (Character.isLetter(username.charAt(i))) { // check for at least one letter
                    hasLetter = true;
                }
            }

            if (hasNumber && hasLetter) {
                boolean alreadyTaken = false;
                for (int i = 0; i < userArrayList.size(); i++) {
                    if (username.equals(userArrayList.get(i).getUsername())) {
                        alreadyTaken = true;
                    }
                }

                if (alreadyTaken) {
                    System.out.println("I'm sorry, that username is already taken :(");
                } else {
                    System.out.println("Thank you for creating a valid username.\n"); // if both true, username is
                    invalidUsername = false;
                }
            } else if (hasNumber) {
                System.out.println("Username is missing a letter. Please try again."); // re-prompt
            } else if (hasLetter) {
                System.out.println("Username is missing a number. Please try again."); // re-prompt
            } else {
                System.out.println("Username does not contain a letter and number. Please try again."); // re-prompt
            }
        }
        user.setUsername(username);

        // create password
        boolean invalidPassword = true;
        while (invalidPassword) {
            System.out.println("Please create a password. Note: Must contain at least six digits. Must contain at" +
                    " least one letter and one number.");
            password = scanner.nextLine();
            if (password.length() < 6) {
                System.out.println("Password is too short. Please try again.");
            } else { // password is longer than 6 characters
                boolean hasLetter = false;
                boolean hasNumber = false;
                for (int i = 0; i < password.length(); i++) { // traverse length of given username
                    if (Character.isDigit(password.charAt(i))) { // check for at least one number
                        hasNumber = true;
                    }
                    if (Character.isLetter(password.charAt(i))) { // check for at least one letter
                        hasLetter = true;
                    }
                }

                if (hasNumber && hasLetter) {
                    System.out.println("Thank you for creating a valid password.\n"); // if both true, username is
                    invalidPassword = false;
                } else if (hasNumber) {
                    System.out.println("Password is missing a letter. Please try again."); // re-prompt
                } else if (hasLetter) {
                    System.out.println("Password is missing a number. Please try again."); // re-prompt
                } else {
                    System.out.println("Password does not contain a letter and number. Please try again."); // re-prompt
                }
            }
        }
        user.setPassword(password);

        // become user or seller
        boolean invalidInt = true;
        while (invalidInt) {
            System.out.println("Would you like to be a Seller or Customer?");
            System.out.println("1. Seller\n2. Customer");
            userCustomer = scanner.nextInt();
            scanner.nextLine();
            if (userCustomer == 1) { // user would like to be a seller
                user.setSeller(true);
                invalidInt = false;
            } else if (userCustomer == 2) { // user would like to be a custoemr
                user.setSeller(false);
                invalidInt = false;
            } else {
                System.out.println("Please enter a valid option, 1 or 2.");
            }
        }
        return user;
    } // end createAccount method

    // begin loginToAccount method
    public static User loginToAccount() {
        User user = new User(null, null, null, true);
        String username = "";
        String password = "";
        String email = "";

        int currentUser = 0;

        boolean invalidUsername = true;
        do {
            System.out.println("Enter your username.");
            username = scanner.nextLine();
            boolean found = false;
            for (int i = 0; i < userArrayList.size(); i++) {
                if (userArrayList.get(i).getUsername().equals(username)) {
                    password = userArrayList.get(i).getPassword(); // assign expected password based on given username
                    currentUser = i;
                    found = true;
                    invalidUsername = false;
                }
            }
            if (!found) {
                System.out.println("Invalid username. Please re-enter.");
            }
        } while (invalidUsername);

        boolean invalidPassword = true;
        while (invalidPassword) {
            if (!password.equals("")) { // will not run until a valid username has been provided
                System.out.println("Please enter your password.");
                String enteredPassword = scanner.nextLine();
                if (enteredPassword.equals(password)) {
                    System.out.println("Welcome back, " + username + "!");
                    invalidPassword = false;
                } else {
                    System.out.println("Password does not match. Please try again.");
                }
            }
        }
        return userArrayList.get(currentUser);
    } // end loginToAccount method

    public static void deleteAccount() {
        User user = new User(null, null, null, true);
        String username = "";
        String password = "";
        int currentUser = 0;

        boolean invalidUsername = true;
        do {
            System.out.println("Enter your username.");
            username = scanner.nextLine();
            boolean found = false;
            for (int i = 0; i < userArrayList.size(); i++) {
                if (userArrayList.get(i).getUsername().equals(username)) {
                    password = userArrayList.get(i).getPassword(); // assign expected password based on given username
                    currentUser = i;
                    found = true;
                    invalidUsername = false;
                }
            }
            if (!found) {
                System.out.println("Invalid username. Please re-enter.");
            }
        } while (invalidUsername);

        boolean invalidPassword = true;
        while (invalidPassword) {
            if (!password.equals("")) { // will not run until a valid username has been provided
                System.out.println("Please enter your password.");
                String enteredPassword = scanner.nextLine();
                if (enteredPassword.equals(password)) {
                    System.out.printf("Hello %s.\n\n", username);
                    invalidPassword = false;
                } else {
                    System.out.println("Password does not match. Please try again.");
                }
            }
        }

        System.out.println("Deleting account...");
        for (int i = 0; i < CustomerArrayList.size(); i++) {
            if (userArrayList.get(currentUser).getUsername().equals(CustomerArrayList.get(i).getUsername())) {
                CustomerArrayList.remove(i);
            }
        }
        for (int i = 0; i < SellerArrayList.size(); i++) {
            if (userArrayList.get(currentUser).getUsername().equals(SellerArrayList.get(i).getUsername())) {
                SellerArrayList.remove(i);
            }
        }
        userArrayList.remove(currentUser);
        System.out.println("Account has been deleted.\n");
    } // end deleteAccount method
    public static void processData(String filename) {

        try {
            FileReader fr = new FileReader(filename);
            BufferedReader br = new BufferedReader(fr);


            int section = 0; //1 = users, 2 = stores, 3 = sales, 4 = carts, 5 = purchases
            int lineCount = 0;

            //for section 1
            String username = "";
            String password = "";
            String email = "";
            boolean seller = true;
            Seller tempSeller = new Seller(null, null, null, true);

            //for section 2
            Store tempStore = new Store(null, null);
            String storeName = "";
            String productName = "";
            String milk = "";
            String type = "";
            String syrup = "";
            String special = "";
            double price = 0;
            int quantity = 0;

            int userCount = -1; //use this to keep track of which user we are working with
            int storeCount = -1;

            while (true) {
                String line = br.readLine();
                if (line == null) {
                    break;
                }

                if (line.equals("*NEW USER*")) {
                    userCount++;
                    section = 1;
                    lineCount = 0;
                } else if (line.equals("*NEW STORE*")) {
                    storeCount++;
                    section = 2;
                    lineCount = 0;
                } else if (line.equals("*SALES*")) {
                    section = 3;
                } else if (line.equals("*CART*")) {
                    section = 4;
                } else if (line.equals("*PURCHASES*")) {
                    section = 5;
                }

                //NEW USER
                if (section == 1) {
                    if (lineCount == 1) {
                        username = line;
                    } else if (lineCount == 2) {
                        password = line;
                    } else if (lineCount == 3) {
                        email = line;
                    } else if (lineCount == 4) {
                        if (line.equals("customer")) {
                            seller = false;
                            Customer tempCustomer = new Customer(username, password, email, seller);
                            CustomerArrayList.add(tempCustomer);
                        } else {
                            seller = true;
                            tempSeller = new Seller(username, password, email, seller);
                            SellerArrayList.add(tempSeller);
                        }
                        User tempUser = new User(username, password, email, seller);
                        userArrayList.add(tempUser);

                    } else if (lineCount == 5) {
                        String stores = line.substring(username.length() + 11);
                        String currentStore = "";
                        while (stores.length() >= 1) {

                            if (stores.contains(",")) {
                                currentStore = stores.substring(0, stores.indexOf(','));
                                stores = stores.substring(stores.indexOf(',') + 2);
                            } else {
                                currentStore = stores;
                                stores = "";
                            }

                            tempStore = new Store(username, currentStore);
                            storeArrayList.add(tempStore);
                            tempSeller.addStore(tempStore);
                        }
                    }
                    lineCount++;
                }

                //NEW STORE
                if (section == 2) {
                    if (lineCount == 1) {
                        storeName = line.substring(0, line.indexOf(39)); //ascii index of " ' "
                    }
                    else if (lineCount > 1) {
                        productName = line.substring(0,line.indexOf(','));
                        line = line.substring(productName.length() + 1);

                        type = line.substring(0,line.indexOf(','));
                        line = line.substring(type.length() + 1);

                        milk = line.substring(0,line.indexOf(','));
                        line = line.substring(milk.length() + 1);

                        syrup = line.substring(0,line.indexOf(','));
                        line = line.substring(syrup.length() + 1);

                        special = line.substring(0,line.indexOf(','));
                        line = line.substring(special.length() + 1);

                        String priceString = line.substring(0,line.indexOf(','));
                        line = line.substring(priceString.length() + 1);
                        price = Double.parseDouble(priceString);

                        String quantityString = line;
                        quantity = Integer.parseInt(quantityString);

                        Product tempProduct = new Product(username, storeName, productName, type, milk, syrup, special, price, quantity);
                        productArrayList.add(tempProduct);
                        tempStore.addProduct(tempProduct);
                    }
                    lineCount++;
                }

                //SALES
                if (section == 3) {
                    tempSeller = new Seller(userArrayList.get(userCount).getUsername(),userArrayList.get(userCount).getPassword(), userArrayList.get(userCount).getEmail(), true);
                    tempSeller.addSales(line);
                }

                //CARTS
                if (section == 4) {
                    Customer tempCustomer = new Customer(userArrayList.get(userCount).getUsername(),userArrayList.get(userCount).getPassword(), userArrayList.get(userCount).getEmail(), false);
                    tempCustomer.addStringToCart(line);
                }

                //PURCHASES
                if (section == 5) {
                    Customer tempCustomer = new Customer(userArrayList.get(userCount).getUsername(),userArrayList.get(userCount).getPassword(), userArrayList.get(userCount).getEmail(), false);
                    tempCustomer.addStringToPurchased(line);
                }
            }
            br.close();
        } catch (IOException e) {
            System.out.printf("There is an error in your process data method!");
        }
    }

    public static void listStores() {
        for (int i = 0; i < userArrayList.size(); i++) {
//            System.out.println(userArrayList.get(i).toString());
            for (int j = 0; j < storeArrayList.size(); j++) {
                if (storeArrayList.get(j).getUserName().equals(userArrayList.get(i).getUsername())) {
                    System.out.println(storeArrayList.get(j).toString());
                    for (int k = 0; k < productArrayList.size(); k++) {
                        if (productArrayList.get(k).getStoreName().equals(storeArrayList.get(j).getStoreName())) {
                            System.out.println(productArrayList.get(k).toString());
                        }
                    }
                }
            }
        }
    }

    public static void main(String[] args) { // main method
        processData("data.txt");
        String responseString = "";
        int responseInt = 0;

        boolean menuOne = false;
        User currentUser = new User();
        do {
            System.out.printf("Welcome to the Coffee Marketplace!\n");
            System.out.printf("How may I help you?\n1. Login\n2. Create Account\n");
            responseInt = scanner.nextInt();
            scanner.nextLine();
            if (responseInt == 1) {
                currentUser = loginToAccount();
            } else if (responseInt == 2) {
                currentUser = createAccount();
                userArrayList.add(currentUser);
                if (!currentUser.isSeller()) {
                    Customer tempCustomer = new Customer(currentUser.getUsername(), currentUser.getPassword(), currentUser.getEmail(),false);
                    CustomerArrayList.add(tempCustomer);
                } else {
                    Seller tempSeller = new Seller(currentUser.getUsername(), currentUser.getPassword(), currentUser.getEmail(),true);
                    SellerArrayList.add(tempSeller);
                }
                System.out.printf("\nWelcome to the Marketplace :)\nWe are so glad to have you as a user.\n\n");
            } else {
                menuOne = true;
            }
        } while (menuOne);

        //seller vs customer paths
        if (currentUser.isSeller()) {
            Seller currentSeller = new Seller(null, null, null, true);
            for (int i = 0; i < SellerArrayList.size(); i++) {
                if (SellerArrayList.get(i).getUsername().equals(currentUser.getUsername())) {
                    currentSeller = SellerArrayList.get(i);
                }
            }

            boolean sellerMainMenu = false;
            boolean validAF = false;
            do {
                System.out.printf("How may I help you?\n1. Create a New Store\n2. Go to Your Stores\n3. View Statistics\n4. Export File\n5. Edit\\Delete Account\n");
                responseInt = scanner.nextInt();
                scanner.nextLine();

                if (responseInt == 1) { //creating a new store;
                    Store newStore = currentSeller.createStore();
                    storeArrayList.add(newStore);
                } else if (responseInt == 2) { //viewing stores and their methods
                    int storeInt;
                    do {
                        currentSeller.listStores();
                        System.out.printf("Which store would you like to work on?\n");
                        storeInt = scanner.nextInt();
                        scanner.nextLine();
                    } while ((storeInt > currentSeller.getStores().size()) || (storeInt <= 0));

                    boolean storeMenu;
                    do {
                        storeMenu = false;
                        Store currentStore = currentSeller.getStores().get(storeInt - 1);
                        System.out.printf("What would you like to do with %s?\n1. Edit Store Name\n2. Delete Store\n3. Go to Your Products\n4. Add a Product\n", currentStore.getStoreName());
                        int storeMenuChoice = scanner.nextInt();
                        scanner.nextLine();

                        if (storeMenuChoice == 1) { //editing store name
                            System.out.printf("Old Name: %s\nEnter the new name:\n", currentStore.getStoreName());
                            String newStoreName = scanner.nextLine();

                            //making the change
                            for (int i = 0; i < storeArrayList.size(); i++) {
                                if (storeArrayList.get(i).getStoreName().equals(currentStore.getStoreName())) {
                                    storeArrayList.get(i).setStoreName(newStoreName);
                                }
                            }
                            for (int i = 0; i < currentSeller.getStores().size(); i++) {
                                if (currentSeller.getStores().get(i).getStoreName().equals(currentStore.getStoreName())) {
                                    currentSeller.getStores().get(i).setStoreName(newStoreName);
                                }
                            }
                            currentStore.setStoreName(newStoreName);
                            System.out.printf("Done! Your new store name is: %s\n", currentStore.getStoreName());
                        } else if (storeMenuChoice == 2) { //deleting the store
                            System.out.printf("Are you sure you want to delete: %s?\n1. Yes\n2. No\n", currentStore.getStoreName());
                            int deleteResponse = scanner.nextInt();
                            scanner.nextLine();

                            if (deleteResponse == 1) {
                                //making the change
                                for (int i = 0; i < storeArrayList.size(); i++) {
                                    if (storeArrayList.get(i).getStoreName().equals(currentStore.getStoreName())) {
                                        storeArrayList.remove(i);
                                    }
                                }
                                for (int i = 0; i < currentSeller.getStores().size(); i++) {
                                    if (currentSeller.getStores().get(i).getStoreName().equals(currentStore.getStoreName())) {
                                        currentSeller.getStores().remove(i);
                                    }
                                }
                                System.out.printf("Done! %s no longer exists.\n", currentStore.getStoreName());
                            } else {
                                System.out.printf("Okay! Keeping: %s\n", currentStore.getStoreName());
                            }
                        } else if (storeMenuChoice == 3) {
                            int productInt;
                            do {
                                currentStore.listProducts();
                                System.out.printf("Which product would you like to work on?\n");
                                productInt = scanner.nextInt();
                                scanner.nextLine();
                            } while ((productInt > currentStore.getProducts().size()) || (productInt <= 0));

                            boolean productMenu;
                            do {
                                productMenu = false;
                                Product currentProduct = currentStore.getProducts().get(productInt - 1);
                                System.out.printf("What would you like to do with %s?\n1. Edit Product\n2. Delete Product\n3. View Product Description\n", currentProduct.getProductName());
                                int productMenuChoice = scanner.nextInt();
                                scanner.nextLine();

                                if (productMenuChoice == 1) {
                                    currentStore.editProduct(currentProduct);
                                } else if (productMenuChoice == 2) {
                                    currentStore.deleteProduct(currentProduct);
                                } else if (productMenuChoice == 3) {
                                    System.out.printf("%s\n", currentProduct.toString());
                                } else {
                                    productMenu = true;
                                }
                            } while (productMenu);
                        } else if (storeMenuChoice == 4) {
                            Product newProduct = currentStore.createProduct();
                            productArrayList.add(newProduct);
                        } else {
                            storeMenu = true;
                        }
                    } while (storeMenu);
                } else if (responseInt == 3) { //statistics
                    currentUser.statistics();
                } else if (responseInt == 4) { //exportfile
                    currentUser.exportFile();
                } else if (responseInt == 5) {
                    boolean accountEdit;
                    do {
                        accountEdit = false;
                        System.out.printf("What would you like to do?\n1. Edit Account\n2. Delete Account\n3. Return\n");
                        int editResponse = scanner.nextInt();
                        scanner.nextLine();
                        if (editResponse == 1) {
                            User tempNewUser = currentUser.editAccount(currentUser);
                            for (int i = 0; i < userArrayList.size(); i++) {
                                if (userArrayList.get(i).getUsername().equals(currentUser.getUsername())) {
                                    userArrayList.set(i, currentUser);
                                }
                            }
                            currentUser = tempNewUser;
                        } else if (editResponse == 2) {
                            deleteAccount();
                            validAF = true;
                            sellerMainMenu = false;
                        } else if (editResponse == 3) {
                            System.out.printf("Okay! Being returned....\n");
                        } else {
                            accountEdit = true;
                        }
                    } while (accountEdit);
                } else {
                    sellerMainMenu = true;
                }

                while (!validAF) {
                    System.out.printf("May I help you with anything else?\n1. Yes\n2. No\n");
                    int finalResponse = scanner.nextInt();
                    scanner.nextLine();
                    if (finalResponse == 1) {
                        sellerMainMenu = true;
                        validAF = true;
                    } else if (finalResponse == 2) {
                        sellerMainMenu = false;
                        validAF = true;
                    } else {
                        validAF = false;
                    }
                }
            } while (sellerMainMenu);

            System.out.printf("Goodbye!\nHope to see you back again soon :)\n");
        } else {
            Customer currentCustomer = new Customer(null, null, null, false);
            for (int i = 0; i < CustomerArrayList.size(); i++) {
                if (CustomerArrayList.get(i).getUsername().equals(currentUser.getUsername())) {
                    currentCustomer = CustomerArrayList.get(i);
                }
            }
            boolean customerMainMenu = false;
            boolean validAF = false;
            do {
                System.out.printf("How may I help you?\n1. List stores (Shop)\n2. View Statistics\n3. Export " +
                        "File\n4. View/Edit Shopping Cart\n5. Edit Account\n");
                responseInt = scanner.nextInt();
                scanner.nextLine();
                if (responseInt == 1) { // list stores and shop
                    listStores();
                    System.out.println("Which store would you like to shop at? Please type exactly.");
                    String preferredStore = scanner.nextLine();
                    Store store = new Store(currentCustomer.getUsername(), preferredStore);
                    System.out.println("What item would you like to purchase?");
                    String product = scanner.nextLine();
                    //adding the product to cart!!!!
                    Product addedProduct = new Product(null, null, null, null, null,null, null, 0, 0);
                    for (int i = 0; i < productArrayList.size(); i++) {
                        if (productArrayList.get(i).getProductName().equals(product)) {
                            addedProduct = productArrayList.get(i);
                        }
                    }
                    currentCustomer.addProductToCart(addedProduct);
                } else if (responseInt == 2) {  //statistics
                    currentUser.statistics();
                } else if (responseInt == 3) { //export file
                    currentUser.exportFile();
                } else if (responseInt == 4) { // view/edit shopping cart
                    boolean invalidInt = true;
                    while (invalidInt) {
                        boolean noReturn = true;
                        while (noReturn) {
                            System.out.println("Would you like to view or edit your shopping cart? \n1. View\n2. Edit");
                            int viewEdit = scanner.nextInt();
                            scanner.nextLine();
                            if (viewEdit == 1) { // view cart
                                System.out.println("Viewing cart...");
                                invalidInt = false;
                                for (int i = 0; i < currentCustomer.getCart().size(); i++) {
                                    try {
                                        BufferedReader reader = new BufferedReader(new FileReader("data.txt"));
                                        String line = reader.readLine();
                                        while (line != null) { // read through entire list
                                            line = reader.readLine();
                                            System.out.println(line);
                                        }
                                        reader.close();
                                    } catch (IOException e) {
                                        e.printStackTrace();
                                    }
                                }
                            } else if (viewEdit == 2) { // edit cart
                                invalidInt = false;
                                currentCustomer.editCart();
                            } else {
                                System.out.println("Please enter a valid number; 1 or 2.");
                            }
                            System.out.println("Type 1 to return.");
                            int returnInt = scanner.nextInt();
                            scanner.nextLine();
                            if (returnInt == 1) {
                                noReturn = false;
                                break;
                            }
                        }
                    }
                } else if (responseInt == 5) { // edit account
                    boolean accountEdit;
                    do {
                        accountEdit = false;
                        System.out.printf("What would you like to do?\n1. Edit Account\n2. Delete Account\n3. " +
                                "Return\n");
                        int editResponse = scanner.nextInt();
                        scanner.nextLine();
                        if (editResponse == 1) {
                            User tempNewUser = currentUser.editAccount(currentUser);
                            for (int i = 0; i < userArrayList.size(); i++) {
                                if (userArrayList.get(i).getUsername().equals(currentUser.getUsername())) {
                                    userArrayList.set(i, currentUser);
                                }
                            }
                            currentUser = tempNewUser;
                        } else if (editResponse == 2) {
                            deleteAccount();
                            validAF = true;
                            customerMainMenu = false;
                        } else if (editResponse == 3) {
                            System.out.printf("Okay! Being returned....\n");
                        } else {
                            accountEdit = true;
                        }
                    } while (accountEdit);
                } else {
                    customerMainMenu = true;
                }
                while (!validAF) {
                    System.out.printf("May I help you with anything else?\n1. Yes\n2. No\n");
                    int finalResponse = scanner.nextInt();
                    scanner.nextLine();
                    if (finalResponse == 1) {
                        customerMainMenu = true;
                        validAF = true;
                    } else if (finalResponse == 2) {
                        customerMainMenu = false;
                        validAF = true;
                    } else {
                        validAF = false;
                    }
                }
            } while (customerMainMenu);
        }
    }
}
