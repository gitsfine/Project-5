import javax.swing.*;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.util.List;
import java.util.Scanner;
import javax.swing.JOptionPane;
import javax.swing.JFrame;
import java.util.*;
public class Main implements Runnable {

    static JButton enterButton = new JButton("Enter"); // button to go to next GUI
    static JButton cancelButton = new JButton("Cancel");
    static JTextField strTextField; // text field for input


    public void run() {
        Scanner scanner = new Scanner(System.in);  // Create a Scanner object

        Marketplace marketplace = loadMarketplace();
        if(marketplace == null){
            marketplace = new Marketplace();
        }
        startUserInput(scanner,marketplace);
    }
    public static void main(String[] args) {
        SwingUtilities.invokeLater(new Main());
    }

    public static boolean startUserInput(Scanner s, Marketplace m) {
        //welcome GUI
        JFrame welcomeFr = new JFrame("Coffee Shop MarketPlace");
        Container content = welcomeFr.getContentPane();
        content.setLayout(new BorderLayout());

        //add them to our frame by creating a JPanel and adding the panel to the content container.
        JPanel panel = new JPanel();
        panel.add(enterButton);
        System.out.print("enter");
        panel.add(cancelButton);
        content.add(panel, BorderLayout.SOUTH);

        //add text
        welcomeFr.add(new JLabel("Welcome to Coffee Shop MarketPlace!"), BorderLayout.CENTER);

        //set the size, location, close operation, and visibility
        welcomeFr.setSize(400, 200);
        welcomeFr.setLocationRelativeTo(null);
        welcomeFr.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
        welcomeFr.setVisible(true);
        boolean status = signupOrLogin(s,m);

        //for button to function
        cancelButton.addActionListener(e -> {
            System.out.println("false");
            welcomeFr.setVisible(false);
        });
        enterButton.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent e) {
                Main ma = new Main();
                boolean status = ma.signupOrLogin(s, m);
            }
        });



        if (status == false)
            return false;
        if (m.isLoggedInUserSeller()) {
            runSellerHandler(s,m);
        } else {
            runCustomerHandler(s,m);
        }
        return true;
    }

    public static boolean signupOrLogin(Scanner s, Marketplace m) {
        System.out.println("Let's get started! Are you a new user? [yes/no/quit]");
        String newUserPromptInput = "";
        while (!newUserPromptInput.equals("yes") && !newUserPromptInput.equals("no") && !newUserPromptInput.equals("quit")) {
            newUserPromptInput = s.nextLine();
        }
        if (newUserPromptInput.equals("quit"))
            return false;
        if (newUserPromptInput.equals("yes")) {
            boolean signupComplete = false;
            String username, password, email, isSellerStr;
            while (signupComplete == false) {
                System.out.println("Please enter a username:");
                username = s.nextLine();
                System.out.println("Please enter a password:");
                password = s.nextLine();
                System.out.println("Please enter an email:");
                email = s.nextLine();
                System.out.println("Are you a seller: [yes/no]");
                isSellerStr = s.nextLine();
                boolean isSeller = false;
                if (isSellerStr.equals("yes")) {
                    isSeller = true;
                }
                signupComplete = m.createAccount(username, password, email, isSeller);
            }
        } else {
            boolean loginComplete = false;
            String username, password;
            while (loginComplete == false) {
                System.out.println("Please enter a username:");
                username = s.nextLine();
                System.out.println("Please enter a password:");
                password = s.nextLine();
                loginComplete = m.attemptLogin(username, password);
            }
        }
        return true;
    }

    public static int readNumberOption(Scanner s, int max) {
        int input = 0;
        while (input <= 0 || input > max) {
            while (!s.hasNextInt()){
                s.nextLine();
                System.out.println("Please enter a valid number!");
            }
            input = s.nextInt();
            s.nextLine();
        }
        return input;
    }

    public static boolean promptDecending(Scanner s) {
        System.out.println("Choose an option");
        System.out.println("1. Ascending");
        System.out.println("2. Descending");
        int option = readNumberOption(s, 2);
        return option == 2;
    }

    public static void runSellerHandler(Scanner s, Marketplace m) {
        System.out.println("Welcome seller: "+ m.getLoggedInUsername());
        boolean isActive = true;
        while (isActive) {
            System.out.println("Select an option to perform!");
            System.out.println("1. Create new store");
            System.out.println("2. View or modify your stores");
            System.out.println("3. Dashboard of sale count by customer");
            System.out.println("4. Dashboard of sale count by product");
            System.out.println("5. Log out");
            int promptChoice = readNumberOption(s, 5);
            switch (promptChoice) {
                case 1:
                    createStore(s,m);
                    break;
                case 2:
                    modifyStore(s,m);
                    break;
                case 3:
                    System.out.print(m.dashboardCustomerNumSales(promptDecending(s)));
                    break;
                case 4:
                    System.out.print(m.dashboardProductNumSales(promptDecending(s)));
                    break;
                case 5:
                    isActive = false;
                    break;
            }
        }

    }

    public static void createStore(Scanner s, Marketplace m) {
        System.out.println("Enter store name.");
        boolean status = m.createStore(s.nextLine());
        if (status) {
            System.out.println("Store created!");
        } else {
            System.out.println("Store name in use");
        }
    }

    public static void modifyStore(Scanner s, Marketplace m) {
        List<Store> stores = m.listStoresForSeller();
        System.out.println("===Your Stores===");
        for (int i = 0; i < stores.size(); i++) {
            System.out.println((i+1)+". "+ stores.get(i).getName());
        }

        System.out.println("Select store to view or modify");
        int storeIndex = readNumberOption(s, stores.size())-1;
        Store store = stores.get(storeIndex);

        System.out.println("Choose an option");
        System.out.println("1. List sales");
        System.out.println("2. Create new product");
        System.out.println("3. List/Modify existing products"); //-> delete, edit
        System.out.println("4. Dashboard of revenue by customer");
        System.out.println("5. Export products as csv.");
        System.out.println("6. Import products as csv.");
        int promptChoice = readNumberOption(s, 6);

        switch (promptChoice) {
            case 1:
                listSales(store);
                break;
            case 2:
                createNewProduct(s,m,store);
                break;
            case 3:
                modifyProducts(s,m,store);
                break;
            case 4:
                System.out.println(m.customerRevenueSaleList(store));
                break;
            case 5:
                System.out.println("Enter export filepath.");
                System.out.println(m.exportProductList(store, s.nextLine()));
                break;
            case 6:
                System.out.println("Enter import filepath.");
                boolean status = m.importProductList(store, s.nextLine());
                if (status == false) {
                    System.out.println("Failed to import all products");
                } else {
                    System.out.println("Done!");
                }
                break;
        }
    }

    public static void listSales(Store store) {
        List<Sale> sales = store.getSales();
        System.out.println("===Sales===");
        for (int i = 0; i < sales.size(); i++) {
            System.out.println((i+1)+". "+ sales.get(i));
        }
    }

    public static void createNewProduct(Scanner s, Marketplace m, Store store) {
        String name, milkType, coffeeType, syrup, special;
        int price, quantity;

        System.out.println("Please enter a name:");
        name = s.nextLine();
        System.out.println("Please enter a milk type:");
        milkType = s.nextLine();
        System.out.println("Please enter a coffee type:");
        coffeeType = s.nextLine();
        System.out.println("Please enter a new syrup:");
        syrup = s.nextLine();
        System.out.println("Please enter the specials:");
        special = s.nextLine();
        System.out.println("Please enter the price as an integer:");
        price = readNumberOption(s,Integer.MAX_VALUE);
        System.out.println("Please enter the quantity as an integer:");
        quantity = readNumberOption(s,Integer.MAX_VALUE);

        boolean status = m.createProduct(store, name, milkType, coffeeType, syrup, special, price, quantity);
        if (status == false) {
            System.out.println("Name already exists in store");
        } else {
            System.out.println("Done!");
        }
    }

    public static void modifyProducts(Scanner s, Marketplace m, Store store) {
        List<Product> products = m.listProducts(store);
        System.out.println("===Products===");
        for (int i = 0; i < products.size(); i++) {
            System.out.println((i+1)+". "+products.get(i).toExport());
        }

        System.out.println("Which product to modify?");
        int productIndex = readNumberOption(s, products.size())-1;
        Product p = products.get(productIndex);

        System.out.println("Choose an option");
        System.out.println("1. Edit product");
        System.out.println("2. Delete product");
        System.out.println("3. Cancel operation");
        int productOption = readNumberOption(s, 3);

        boolean status = false;
        switch (productOption) {
            case 1:
                String name, milkType, coffeeType,syrup, special;
                int price, quantity;

                System.out.println("Please enter a new name:");
                name = s.nextLine();
                System.out.println("Please enter a new milk type:");
                milkType = s.nextLine();
                System.out.println("Please enter a new coffee type:");
                coffeeType = s.nextLine();
                System.out.println("Please enter a new syrup:");
                syrup = s.nextLine();
                System.out.println("Please enter the new specials:");
                special = s.nextLine();
                System.out.println("Please enter the price as an integer:");
                price = readNumberOption(s,Integer.MAX_VALUE);
                System.out.println("Please enter the quantity as an integer:");
                quantity = readNumberOption(s,Integer.MAX_VALUE);

                status = m.editProduct(p, name, milkType, coffeeType, syrup, special, price, quantity);
                break;
            case 2:
                m.removeProduct(p);
                status = true;
                break;
            case 3:
                status = true;
                break;
        }
        if (status == false) {
            System.out.println("Unable to completely perform operation!");
        } else {
            System.out.println("Done!");
        }
    }

    public static void runCustomerHandler(Scanner s, Marketplace m) {
        System.out.println("Welcome customer: "+ m.getLoggedInUsername());
        boolean isActive = true;
        while (isActive) {
            System.out.println("Select an option to perform!");
            System.out.println("1. List all stores");
            System.out.println("2. Search for product");
            System.out.println("3. View cart");
            System.out.println("4. Dashboard of sales count by store");
            System.out.println("5. Dashboard of purchases by store");
            System.out.println("6. Export csv dashboard of purchases by store");
            System.out.println("7. Log out");
            int promptChoice = readNumberOption(s, 7);
            switch (promptChoice) {
                case 1:
                    listAllStores(s,m);
                    break;
                case 2:
                    searchForProduct(s,m);
                    break;
                case 3:
                    viewCart(s,m);
                    break;
                case 4:
                    System.out.println(m.dashboardSaleCounterByStore(promptDecending(s)));
                    break;
                case 5:
                    System.out.println(m.dashboardPurchasesByStore(promptDecending(s)));
                    break;
                case 6:
                    System.out.println("Enter export filepath.");
                    m.exportDashboardPurchasesByStore(s.nextLine());
                    break;
                case 7:
                    isActive = false;
                    break;
            }
        }
    }

    public static void listAllStores(Scanner s, Marketplace m) {
        List<Store> stores = m.listAllStores();
        System.out.println("===Stores===");
        for (int i = 0; i < stores.size(); i++) {
            System.out.println((i+1)+". "+ stores.get(i).getName());
        }

        System.out.println("Select store to view products.");
        int storeIndex = readNumberOption(s, stores.size())-1;
        if(storeIndex>=stores.size())return;

        List<Product> storeProducts = m.viewProducts(stores.get(storeIndex));
        shopFromProducts(s,m,storeProducts);
    }

    public static void searchForProduct(Scanner s, Marketplace m) {
        System.out.println("Enter search criteria.");
        String searchTerm = s.nextLine();
        List<Product> storeProducts = m.searchProducts(searchTerm);
        shopFromProducts(s,m,storeProducts);
    }

    public static void viewCart(Scanner s, Marketplace m) {
        System.out.println("===Cart===");
        List<Product> cart = m.viewCart();
        for (int i = 0; i < cart.size(); i++) {
            System.out.println((i+1)+". "+ cart.get(i).toCombinedString());
        }
        System.out.println("Choose an option");
        System.out.println("1. Checkout");
        System.out.println("2. Delete from cart");
        System.out.println("3. Cancel operation");
        int cartOption = readNumberOption(s, 3);

        boolean status = false;
        switch (cartOption) {
            case 1:
                status = m.checkoutCart();
                break;
            case 2:
                System.out.println("Which item number to remove from cart?");
                int deletionIndex = readNumberOption(s, cart.size())-1;
                status = true;
                m.deleteItemFromCart(cart.get(deletionIndex));
                break;
            case 3:
                status = true;
                break;
        }
        if (status == false) {
            System.out.println("Unable to completely perform operation!");
        } else {
            System.out.println("Done!");
        }
    }

    public static void shopFromProducts(Scanner s, Marketplace m, List<Product> storeProducts) {
        System.out.println("===Products===");
        for (int i = 0; i < storeProducts.size(); i++) {
            System.out.println((i+1)+". "+ storeProducts.get(i).toListing());
        }
        System.out.println("Choose a product:");
        int productIndex = readNumberOption(s, storeProducts.size())-1;
        Product p = storeProducts.get(productIndex);

        System.out.println("Choose an option");
        System.out.println("1. Buy it now");
        System.out.println("2. Add to cart");
        System.out.println("3. Cancel operation");
        int purchaseOption = readNumberOption(s, 3);

        boolean status = false;
        switch (purchaseOption) {
            case 1:
                status = m.buyNow(p);
                break;
            case 2:
                status = m.addToCart(p);
                break;
            case 3:
                status = true;
                break;
        }
        if (status == false) {
            System.out.println("Unable to completely perform operation!");
        } else {
            System.out.println("Done!");
        }
    }

    public static Marketplace loadMarketplace() {
        Marketplace m = null;
        try {
            FileInputStream fileIn = new FileInputStream("./MarketplaceState.ser");
            ObjectInputStream in = new ObjectInputStream(fileIn);
            m = (Marketplace) in.readObject();
            in.close();
            fileIn.close();
            return m;
        } catch (Exception e) {
            return m;
        }
    }

    public static void saveMarketplace(Marketplace m) {
        try {
            FileOutputStream fileOut = new FileOutputStream("./MarketplaceState.ser");
            ObjectOutputStream out = new ObjectOutputStream(fileOut);
            out.writeObject(m);
            out.close();
            fileOut.close();
        } catch (Exception e) {
            // nothing
        }
    }

}
