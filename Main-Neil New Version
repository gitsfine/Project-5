import javax.swing.*;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.util.Scanner;
import java.util.*;

public class Main {
    public static void main(String[] args) {
        Marketplace marketplace = loadMarketplace();
        if (marketplace == null) {
            marketplace = new Marketplace();
        }
        Scanner scanner = new Scanner(System.in);  // Create a Scanner object
        while (startUserInput(scanner, marketplace)) ;
        saveMarketplace(marketplace);
    }

    public static boolean startUserInput(Scanner s, Marketplace m) { // GUI done
        JOptionPane.showMessageDialog(null, "Welcome to Coffee Shop MarketPlace!",
                "Coffee Shop MarketPlace", JOptionPane.PLAIN_MESSAGE);

        boolean status = signupOrLogin(s, m);
        if (status == false)
            return false;
        if (m.isLoggedInUserSeller()) {
            runSellerHandler(s, m);
        } else {
            runCustomerHandler(s, m);
        }
        return true;
    }

    public static boolean signupOrLogin(Scanner s, Marketplace m) { // GUI done
        String newUserPromptInput = "";
        do {
            newUserPromptInput = JOptionPane.showInputDialog(null, "Let's get started! Are " +
                            "you a new user? [yes/no/quit]", "Coffee Shop MarketPlace",
                    JOptionPane.QUESTION_MESSAGE);
            if ((newUserPromptInput == null) || (newUserPromptInput.isEmpty())) {
                JOptionPane.showMessageDialog(null, "Please answer!", "Coffee Shop " +
                        "MarketPlace", JOptionPane.ERROR_MESSAGE);
            } //end if
        } while ((newUserPromptInput == null) || (newUserPromptInput.isEmpty()));

        if (newUserPromptInput.equals("quit"))
            return false;

        if (newUserPromptInput.equals("yes")) {
            boolean signupComplete = false;
            String username, password, email, isSellerStr;
            while (signupComplete == false) {

                boolean badUsername;
                do { // enter username
                    username = JOptionPane.showInputDialog(null, "Please create a username!\nNote: Username must contain at least one letter and one number.",
                            "Coffee Shop MarketPlace", JOptionPane.QUESTION_MESSAGE);
                    if ((username == null) || (username.isEmpty())) {
                        JOptionPane.showMessageDialog(null, "Please answer!", "Coffee " +
                                "Shop MarketPlace", JOptionPane.ERROR_MESSAGE);
                        badUsername = true;
                    } else {
                        boolean hasLetter = false;
                        boolean hasNumber = false;
                        for (int i = 0; i < username.length(); i++) { // traverse length of given username
                            if (Character.isDigit(username.charAt(i))) { // check for at least one number
                                hasNumber = true;
                            }
                            if (Character.isLetter(username.charAt(i))) { // check for at least one letter
                                hasLetter = true;
                            }
                        }

                        if (hasNumber && hasLetter) {
                            boolean alreadyTaken = false;
                            for (int i = 0; i < Marketplace.users.size(); i++) {
                                if (username.equals(Marketplace.users.get(i).getUsername())) {
                                    alreadyTaken = true;
                                    break;
                                }
                            }

                            if (alreadyTaken) {
                                JOptionPane.showMessageDialog(null, "I'm sorry, that username is already taken :(", "Coffee " +
                                        "Shop MarketPlace", JOptionPane.ERROR_MESSAGE);
                                badUsername = true;
                            } else {
                                JOptionPane.showMessageDialog(null, "Thank you for creating a valid username :)", "Coffee " +
                                        "Shop MarketPlace", JOptionPane.PLAIN_MESSAGE);
                                badUsername = false;
                            }
                        } else if (hasNumber) {
                            JOptionPane.showMessageDialog(null, "Username is missing a letter. Please try again.", "Coffee " +
                                    "Shop MarketPlace", JOptionPane.ERROR_MESSAGE);
                            badUsername = true;
                        } else if (hasLetter) {
                            JOptionPane.showMessageDialog(null, "Username is missing a number. Please try again.", "Coffee " +
                                    "Shop MarketPlace", JOptionPane.ERROR_MESSAGE);
                            badUsername = true;
                        } else {
                            JOptionPane.showMessageDialog(null, "Username is missing a letter and a number. Please try again.", "Coffee " +
                                    "Shop MarketPlace", JOptionPane.ERROR_MESSAGE);
                            badUsername = true;
                        }
                    }
                } while (badUsername);

                boolean badPassword;
                do { // enter password
                    password = JOptionPane.showInputDialog(null, "Please enter a password!\nNote: Must contain at least six digits. Must contain at least one letter and one number.",
                            "Coffee Shop MarketPlace", JOptionPane.QUESTION_MESSAGE);
                    if ((password == null) || (password.isEmpty())) {
                        JOptionPane.showMessageDialog(null, "Please answer!", "Coffee " +
                                        "Shop MarketPlace",
                                JOptionPane.ERROR_MESSAGE);
                        badPassword = true;
                    } else {
                        if (password.length() < 6) {
                            JOptionPane.showMessageDialog(null, "Password is too short. Please try again.", "Coffee " +
                                            "Shop MarketPlace",
                                    JOptionPane.ERROR_MESSAGE);
                            badPassword = true;
                        } else { // password is longer than 6 characters
                            boolean hasLetter = false;
                            boolean hasNumber = false;
                            for (int i = 0; i < password.length(); i++) { // traverse length of given username
                                if (Character.isDigit(password.charAt(i))) { // check for at least one number
                                    hasNumber = true;
                                }
                                if (Character.isLetter(password.charAt(i))) { // check for at least one letter
                                    hasLetter = true;
                                }
                            }

                            if (hasNumber && hasLetter) {
                                JOptionPane.showMessageDialog(null, "Thank you for creating a valid password :)", "Coffee " +
                                                "Shop MarketPlace",
                                        JOptionPane.PLAIN_MESSAGE);
                                badPassword = false;
                            } else if (hasNumber) {
                                JOptionPane.showMessageDialog(null, "Password is missing a letter. Please try again.", "Coffee " +
                                        "Shop MarketPlace", JOptionPane.ERROR_MESSAGE);
                                badPassword = true;
                            } else if (hasLetter) {
                                JOptionPane.showMessageDialog(null, "Password is missing a number. Please try again.", "Coffee " +
                                        "Shop MarketPlace", JOptionPane.ERROR_MESSAGE);
                                badPassword = true;
                            } else {
                                JOptionPane.showMessageDialog(null, "Password is missing a letter and a number. Please try again.", "Coffee " +
                                        "Shop MarketPlace", JOptionPane.ERROR_MESSAGE);
                                badPassword = true;
                            }
                        }
                    }
                } while (badPassword);

                boolean badEmail;
                do { //enter email
                    email = JOptionPane.showInputDialog(null, "Please enter an email:",
                            "Coffee Shop MarketPlace", JOptionPane.QUESTION_MESSAGE);
                    if ((email == null) || (email.isEmpty())) {
                        JOptionPane.showMessageDialog(null, "Please answer!", "Coffee " +
                                        "Shop MarketPlace",
                                JOptionPane.ERROR_MESSAGE);
                        badEmail = true;
                    } else {
                        boolean hasAtSign = false;
                        boolean hasDot = false;

                        for (int i = 0; i < email.length(); i++) { // traverse length of given username
                            if (email.charAt(i) == 64) { // check for an @ sign, referencing an ascii table
                                hasAtSign = true;
                            }
                            if (hasAtSign && (email.charAt(i) == 46)) { // check for a .extension, referencing an ascii table
                                hasDot = true;
                            }
                        }

                        if (hasAtSign && hasDot) {
                            boolean alreadyTaken = false;
                            for (int i = 0; i < Marketplace.users.size(); i++) {
                                if (email.equals(Marketplace.users.get(i).getEmail())) {
                                    alreadyTaken = true;
                                    break;
                                }
                            }

                            if (alreadyTaken) {
                                JOptionPane.showMessageDialog(null, "It appears that email is already being used.\nPlease try a different email or login instead.\n", "Coffee " +
                                                "Shop MarketPlace",
                                        JOptionPane.ERROR_MESSAGE);
                                badEmail = true;
                            } else {
                                JOptionPane.showMessageDialog(null, "Thank you for inputing a valid email :)", "Coffee " +
                                                "Shop MarketPlace",
                                        JOptionPane.PLAIN_MESSAGE);
                                badEmail = false;
                            }
                        } else if (hasAtSign) {
                            JOptionPane.showMessageDialog(null, "Email is missing a valid extension at the end.\nExample: .com", "Coffee " +
                                            "Shop MarketPlace",
                                    JOptionPane.ERROR_MESSAGE);
                            badEmail = true;
                        } else {
                            JOptionPane.showMessageDialog(null, "Email is improperly formatted.\nPlease ensure it includes an @ sign, and a valid extension (such as .com) at the end.", "Coffee " +
                                            "Shop MarketPlace",
                                    JOptionPane.ERROR_MESSAGE);
                            badEmail = true;
                        }
                    }
                } while (badEmail);

                do { //enter seller
                    isSellerStr = JOptionPane.showInputDialog(null, "Are you a seller? [yes/no]",
                            "Coffee Shop MarketPlace", JOptionPane.QUESTION_MESSAGE);
                    if ((isSellerStr == null) || (isSellerStr.isEmpty())) {
                        JOptionPane.showMessageDialog(null, "Please answer!", "Coffee " +
                                        "Shop MarketPlace",
                                JOptionPane.ERROR_MESSAGE);
                    } //end if
                } while ((isSellerStr == null) || (isSellerStr.isEmpty()));

                boolean isSeller = false;
                if (isSellerStr.equals("yes")) {
                    isSeller = true;
                }
                signupComplete = m.createAccount(username, password, email, isSeller);
            }
        } else {
            boolean loginComplete = false;
            String username, password;
            while (loginComplete == false) {
                do { //enter username
                    username = JOptionPane.showInputDialog(null, "Enter a username:",
                            "Coffee Shop MarketPlace", JOptionPane.QUESTION_MESSAGE);
                    if ((username == null) || (username.isEmpty())) {
                        JOptionPane.showMessageDialog(null, "Please answer!", "Coffee " +
                                        "Shop MarketPlace",
                                JOptionPane.ERROR_MESSAGE);
                    } // end if
                } while ((username == null) || (username.isEmpty()));

                do { // enter password
                    password = JOptionPane.showInputDialog(null, "Enter a password:",
                            "Coffee Shop MarketPlace", JOptionPane.QUESTION_MESSAGE);
                    if ((password == null) || (password.isEmpty())) {
                        JOptionPane.showMessageDialog(null, "Please answer!", "Coffee " +
                                        "Shop MarketPlace",
                                JOptionPane.ERROR_MESSAGE);
                    } // end if
                } while ((password == null) || (password.isEmpty()));
                loginComplete = m.attemptLogin(username, password);
            }
        }
        return true;
    }

    public static int readNumberOption(Scanner s, int max) { // GUI done
        String inputStr = "";
        int input = 0;

        //old proj4 code
//        while (input <= 0 || input > max) {
//            //while the next value is not an int
//            while (!s.hasNextInt()) {
//                s.nextLine();
//                System.out.println("Please enter a valid number!");
//            }
//            input = s.nextInt();
//            s.nextLine();
//        }
//        return input;

        while (input <= 0 || input > max) {
            //while the next value is not an int
            do {
                inputStr = JOptionPane.showInputDialog(null, "Please enter a valid number!",
                        "Coffee Shop MarketPlace", JOptionPane.QUESTION_MESSAGE);
                input = Integer.parseInt(inputStr);
            } while (input != (int) input);
        }
        return input;
    }

    public static boolean promptDecending(Scanner s) { // GUI done
        String[] decendingOptions = {"1. Ascending", "2. Descending"};

        String choice = (String) JOptionPane.showInputDialog(null, "Select an option " +
                        "to perform!", "Coffee Shop MarketPlace", JOptionPane.QUESTION_MESSAGE, null,
                decendingOptions, null);

        int option = readNumberOption(s, 2);
        return option == 2;
    }

    public static void runSellerHandler(Scanner s, Marketplace m) { // GUI done
        JOptionPane.showMessageDialog(null, "Welcome seller: " + m.getLoggedInUsername(),
                "Coffee Shop MarketPlace", JOptionPane.PLAIN_MESSAGE);
        String[] sellerOptions = {"1. Create new store", "2. View or modify your stores",
                "3. Dashboard of sale count by customer", "4. Dashboard of sale count by product", "5. Log out"};

        boolean isActive = true;
        while (isActive) {
            String choice = (String) JOptionPane.showInputDialog(null, "Select an option " +
                            "to perform!", "Coffee Shop MarketPlace", JOptionPane.QUESTION_MESSAGE,
                    null, sellerOptions, null);

            int choiceNum = Integer.parseInt(choice.substring(0,1));
            switch (choiceNum) {
                case 1:
                    createStore(s, m);
                    break;
                case 2:
                    modifyStore(s, m);
                    break;
                case 3:
                    System.out.print(m.dashboardCustomerNumSales(promptDecending(s)));
                    break;
                case 4:
                    System.out.print(m.dashboardProductNumSales(promptDecending(s)));
                    break;
                case 5:
                    isActive = false;
                    break;
            }
        }
    }

    public static void createStore(Scanner s, Marketplace m) { // GUI done
        String storeName;
        do {
            storeName = JOptionPane.showInputDialog(null, "Enter Store Name:",
                    "Coffee Shop MarketPlace", JOptionPane.QUESTION_MESSAGE);
            if ((storeName == null) || (storeName.isEmpty())) {
                JOptionPane.showMessageDialog(null, "Please answer!", "Coffee " +
                                "Shop MarketPlace",
                        JOptionPane.ERROR_MESSAGE);
            } // end if
        } while ((storeName == null) || (storeName.isEmpty()));

        boolean status = m.createStore(storeName);
        if (status) {
            JOptionPane.showMessageDialog(null, "Store Created!",
                    "Coffee Shop MarketPlace", JOptionPane.PLAIN_MESSAGE);
        } else {
            JOptionPane.showMessageDialog(null, "Store name in use!",
                    "Coffee Shop MarketPlace", JOptionPane.PLAIN_MESSAGE);
        }
    }

    public static void modifyStore(Scanner s, Marketplace m) { // GUI done
        List<Store> stores = m.listStoresForSeller();

        String modifyingStore = (String) JOptionPane.showInputDialog(null, "Which store " +
                        "would you like to modify?", "===Your Stores===", JOptionPane.QUESTION_MESSAGE,
                null, new List[]{stores}, null);

        int storeIndex = readNumberOption(s, stores.size()) - 1;
        Store store = stores.get(storeIndex);

        String[] modifyOptions = {"1. List Sales", "2. Create new product", "3. List/Modify existing products",
                "4. Dashboard of revenue by customer", "5. Export products as csv.", "6. Import products as csv."};

        String choice = (String) JOptionPane.showInputDialog(null, "Select an option " +
                        "to perform!", "===Your Stores===", JOptionPane.QUESTION_MESSAGE, null,
                modifyOptions, null);

        int promptChoice = readNumberOption(s, 6);

        switch (promptChoice) {
            case 1:
                listSales(store);
                break;
            case 2:
                createNewProduct(s, m, store);
                break;
            case 3:
                modifyProducts(s, m, store);
                break;
            case 4:
                System.out.println(m.customerRevenueSaleList(store));
                break;
            case 5:
                String filePath;
                do {
                    filePath = JOptionPane.showInputDialog(null, "Enter export filepath.",
                            "===Your Stores===", JOptionPane.QUESTION_MESSAGE);
                    if ((filePath == null) || (filePath.isEmpty())) {
                        JOptionPane.showMessageDialog(null, "Please answer!",
                                "Coffee Shop MarketPlace", JOptionPane.ERROR_MESSAGE);
                    } //end if
                } while ((filePath == null) || (filePath.isEmpty()));
                break;
            case 6:
                boolean status = m.importProductList(store, s.nextLine());
                do {
                    filePath = JOptionPane.showInputDialog(null, "Enter import filepath.",
                            "===Your Stores===", JOptionPane.QUESTION_MESSAGE);
                    if ((filePath == null) || (filePath.isEmpty())) {
                        JOptionPane.showMessageDialog(null, "Please answer!",
                                "Coffee Shop MarketPlace", JOptionPane.ERROR_MESSAGE);
                    } //end if
                } while ((filePath == null) || (filePath.isEmpty()));
                if (!status) {
                    System.out.println("Failed to import all products");
                } else {
                    System.out.println("Done!");
                }
                break;
        }
    }

    public static void listSales(Store store) { // GUI done, need to format sales?
        List<Sale> sales = store.getSales();
        JOptionPane.showMessageDialog(null, "Sales: " + sales,
                "===Sales===", JOptionPane.PLAIN_MESSAGE); // show sales, user clicks "ok"
    }

    public static void createNewProduct(Scanner s, Marketplace m, Store store) { // GUI done
        String name, milkType, coffeeType, syrup, special, priceString, quantityString;
        int price, quantity;
        do { // enter name
            name = JOptionPane.showInputDialog(null, "Please enter a name.",
                    "===Products===", JOptionPane.QUESTION_MESSAGE);
            if ((name == null) || (name.isEmpty())) {
                JOptionPane.showMessageDialog(null, "Please answer!",
                        "===Products===", JOptionPane.ERROR_MESSAGE);
            } // end if
        } while ((name == null) || (name.isEmpty()));

        do { // enter milk type
            milkType = JOptionPane.showInputDialog(null, "Please enter a milk type.",
                    "===Products===", JOptionPane.QUESTION_MESSAGE);
            if ((milkType == null) || (milkType.isEmpty())) {
                JOptionPane.showMessageDialog(null, "Please answer!",
                        "===Products===", JOptionPane.ERROR_MESSAGE);
            } // end if
        } while ((milkType == null) || (milkType.isEmpty()));

        do { // enter coffee type
            coffeeType = JOptionPane.showInputDialog(null, "Please enter a coffee type.",
                    "===Products===", JOptionPane.QUESTION_MESSAGE);
            if ((coffeeType == null) || (coffeeType.isEmpty())) {
                JOptionPane.showMessageDialog(null, "Please answer!",
                        "===Products===", JOptionPane.ERROR_MESSAGE);
            } // end if
        } while ((coffeeType == null) || (coffeeType.isEmpty()));

        do { // enter syrup
            syrup = JOptionPane.showInputDialog(null, "Please enter a syrup.",
                    "===Products===", JOptionPane.QUESTION_MESSAGE);
            if ((syrup == null) || (syrup.isEmpty())) {
                JOptionPane.showMessageDialog(null, "Please answer!",
                        "===Products===", JOptionPane.ERROR_MESSAGE);
            } // end if
        } while ((syrup == null) || (syrup.isEmpty()));

        do { // enter specials
            special = JOptionPane.showInputDialog(null, "Please enter the specials.",
                    "===Products===", JOptionPane.QUESTION_MESSAGE);
            if ((special == null) || (special.isEmpty())) {
                JOptionPane.showMessageDialog(null, "Please answer!",
                        "===Products===", JOptionPane.ERROR_MESSAGE);
            } // end if
        } while ((special == null) || (special.isEmpty()));

//        price = readNumberOption(s, Integer.MAX_VALUE);
        do { // enter price
            priceString = JOptionPane.showInputDialog(null, "Please enter a price as an " +
                    "integer.", "===Products===", JOptionPane.QUESTION_MESSAGE);
            if ((priceString == null) || (priceString.isEmpty())) {
                JOptionPane.showMessageDialog(null, "Please answer!",
                        "===Products===", JOptionPane.ERROR_MESSAGE);
            } // end if
        } while ((priceString == null) || (priceString.isEmpty()));
        price = Integer.parseInt(priceString);

//        quantity = readNumberOption(s, Integer.MAX_VALUE);
        do { // enter quantity
            quantityString = JOptionPane.showInputDialog(null, "Please enter a quantity as " +
                    "an integer.", "===Products===", JOptionPane.QUESTION_MESSAGE);
            if ((quantityString == null) || (quantityString.isEmpty())) {
                JOptionPane.showMessageDialog(null, "Please answer!",
                        "===Products===", JOptionPane.ERROR_MESSAGE);
            } // end if
        } while ((quantityString == null) || (quantityString.isEmpty()));
        quantity = Integer.parseInt(quantityString);

        boolean status = m.createProduct(store, name, milkType, coffeeType, syrup, special, price, quantity);
        if (status == false) {
            System.out.println("Name already exists in store");
        } else {
            System.out.println("Done!");
        }
    }

    public static void modifyProducts(Scanner s, Marketplace m, Store store) { // GUI done, need to format products?
        List<Product> products = m.listProducts(store);
        String modifyingProduct = (String) JOptionPane.showInputDialog(null, "Which product " +
                        "would you like to modify?", "===Products===", JOptionPane.QUESTION_MESSAGE,
                null, new List[]{products}, null);

        int productIndex = readNumberOption(s, products.size()) - 1;
        Product p = products.get(productIndex);

        String[] modifyOptions = {"1. Edit product", "2. Delete product", "3. Cancel operation"};

        String choice = (String) JOptionPane.showInputDialog(null, "Select an option " +
                        "to perform!", "===Products===", JOptionPane.QUESTION_MESSAGE,
                null, modifyOptions, null);

        int productOption = readNumberOption(s, 3);
        boolean status = false;
        switch (productOption) {
            case 1:
                String name, milkType, coffeeType, syrup, special, priceString, quantityString;
                int price, quantity;
                do { // enter new name
                    name = JOptionPane.showInputDialog(null, "Please enter a new name.",
                            "===Products===", JOptionPane.QUESTION_MESSAGE);
                    if ((name == null) || (name.isEmpty())) {
                        JOptionPane.showMessageDialog(null, "Please answer!",
                                "===Products===", JOptionPane.ERROR_MESSAGE);
                    } // end if
                } while ((name == null) || (name.isEmpty()));

                do { // enter new milk type
                    milkType = JOptionPane.showInputDialog(null, "Please enter a new milk" +
                            " type.", "===Products===", JOptionPane.QUESTION_MESSAGE);
                    if ((milkType == null) || (milkType.isEmpty())) {
                        JOptionPane.showMessageDialog(null, "Please answer!",
                                "===Products===", JOptionPane.ERROR_MESSAGE);
                    } // end if
                } while ((milkType == null) || (milkType.isEmpty()));

                do { // enter new coffee type
                    coffeeType = JOptionPane.showInputDialog(null, "Please enter a new coffee" +
                            " type.", "===Products===", JOptionPane.QUESTION_MESSAGE);
                    if ((coffeeType == null) || (coffeeType.isEmpty())) {
                        JOptionPane.showMessageDialog(null, "Please answer!",
                                "===Products===", JOptionPane.ERROR_MESSAGE);
                    } // end if
                } while ((coffeeType == null) || (coffeeType.isEmpty()));

                do { // enter new syrup
                    syrup = JOptionPane.showInputDialog(null, "Please enter a new syrup.",
                            "===Products===", JOptionPane.QUESTION_MESSAGE);
                    if ((syrup == null) || (syrup.isEmpty())) {
                        JOptionPane.showMessageDialog(null, "Please answer!",
                                "===Products===", JOptionPane.ERROR_MESSAGE);
                    } // end if
                } while ((syrup == null) || (syrup.isEmpty()));

                do { // enter new specials
                    special = JOptionPane.showInputDialog(null, "Please enter the new specials.",
                            "===Products===", JOptionPane.QUESTION_MESSAGE);
                    if ((special == null) || (special.isEmpty())) {
                        JOptionPane.showMessageDialog(null, "Please answer!",
                                "===Products===", JOptionPane.ERROR_MESSAGE);
                    } // end if
                } while ((special == null) || (special.isEmpty()));

//                price = readNumberOption(s, Integer.MAX_VALUE);
                do { // enter new price
                    priceString = JOptionPane.showInputDialog(null, "Please enter a new " +
                            "price as an integer.", "===Products===", JOptionPane.QUESTION_MESSAGE);
                    if ((priceString == null) || (priceString.isEmpty())) {
                        JOptionPane.showMessageDialog(null, "Please answer!",
                                "===Products===", JOptionPane.ERROR_MESSAGE);
                    } // end if
                } while ((priceString == null) || (priceString.isEmpty()));
                price = Integer.parseInt(priceString);

//                quantity = readNumberOption(s, Integer.MAX_VALUE);
                do { // enter new quantity
                    quantityString = JOptionPane.showInputDialog(null, "Please enter a new " +
                            "quantity as an integer.", "===Products===", JOptionPane.QUESTION_MESSAGE);
                    if ((quantityString == null) || (quantityString.isEmpty())) {
                        JOptionPane.showMessageDialog(null, "Please answer!",
                                "===Products===", JOptionPane.ERROR_MESSAGE);
                    } // end if
                } while ((quantityString == null) || (quantityString.isEmpty()));
                quantity = Integer.parseInt(quantityString);

                status = m.editProduct(p, name, milkType, coffeeType, syrup, special, price, quantity);
                break;
            case 2:
                m.removeProduct(p);
                status = true;
                break;
            case 3:
                status = true;
                break;
        }
        if (status == false) {
            System.out.println("Unable to completely perform operation!");
        } else {
            System.out.println("Done!");
        }
    }

    public static void runCustomerHandler(Scanner s, Marketplace m) { // GUI done
        JOptionPane.showMessageDialog(null, "Welcome customer: " + m.getLoggedInUsername(),
                "Coffee Shop MarketPlace", JOptionPane.PLAIN_MESSAGE); // show username, user clicks "ok"

        boolean isActive = true;
        while (isActive) {
            String[] customerOptions = {"1. List all stores", "2. Search for product", "3. View cart", "4. Dashboard" +
                    " of sales count by store", "5. Dashboard of purchases by store", "6. Export csv dashboard of" +
                    " purchases by store", "7. Log out"};
            String choice = (String) JOptionPane.showInputDialog(null, "Select an option to " +
                            "perform!", "Coffee Shop MarketPlace", JOptionPane.QUESTION_MESSAGE, null,
                    customerOptions, null);
            // how to get selected choice from GUI into code?
            int promptChoice = readNumberOption(s, 7);
            switch (promptChoice) {
                case 1:
                    listAllStores(s, m);
                    break;
                case 2:
                    searchForProduct(s, m);
                    break;
                case 3:
                    viewCart(s, m);
                    break;
                case 4:
                    System.out.println(m.dashboardSaleCounterByStore(promptDecending(s)));
                    break;
                case 5:
                    System.out.println(m.dashboardPurchasesByStore(promptDecending(s)));
                    break;
                case 6:
                    String filePath;
                    do {
                        filePath = JOptionPane.showInputDialog(null, "Enter export filepath.",
                                "Coffee Shop MarketPlace", JOptionPane.QUESTION_MESSAGE);
                        if ((filePath == null) || (filePath.isEmpty())) {
                            JOptionPane.showMessageDialog(null, "Please answer!",
                                    "Coffee Shop MarketPlace", JOptionPane.ERROR_MESSAGE);
                        } //end if
                    } while ((filePath == null) || (filePath.isEmpty()));
                    m.exportDashboardPurchasesByStore(filePath);
                    break;
                case 7:
                    isActive = false;
                    break;
            }
        }
    }

    public static void listAllStores(Scanner s, Marketplace m) { // GUI done
        List<Store> stores = m.listAllStores();
        String store = "";
        store = (String) JOptionPane.showInputDialog(null, "Select a store to view products.",
                "===Stores===", JOptionPane.QUESTION_MESSAGE, null, new List[]{stores},
                null);
        // how to get selected store value from GUI into code?
        int storeIndex = readNumberOption(s, stores.size()) - 1;
        if (storeIndex >= stores.size()) return;

        List<Product> storeProducts = m.viewProducts(stores.get(storeIndex));
        shopFromProducts(s, m, storeProducts);
    }

    public static void searchForProduct(Scanner s, Marketplace m) { // GUI done
        String searchTerm;
        do {
            searchTerm = JOptionPane.showInputDialog(null, "Enter search criteria.",
                    "===Stores===", JOptionPane.QUESTION_MESSAGE);
            if ((searchTerm == null) || (searchTerm.isEmpty())) {
                JOptionPane.showMessageDialog(null, "Please answer!", "===Stores===",
                        JOptionPane.ERROR_MESSAGE);
            } //end if
        } while ((searchTerm == null) || (searchTerm.isEmpty()));

        List<Product> storeProducts = m.searchProducts(searchTerm);
        shopFromProducts(s, m, storeProducts);
    }

    public static void viewCart(Scanner s, Marketplace m) { // GUI done
        List<Product> cart = m.viewCart();
        JOptionPane.showMessageDialog(null, "Current cart: " + cart,
                "===Cart===", JOptionPane.PLAIN_MESSAGE); // show cart, user clicks "ok"

        String[] cartOptions = {"1. Checkout", "2. Delete from cart", "3. Cancel operation"};
        String choice;
        choice = (String) JOptionPane.showInputDialog(null, "Select an option to preform!",
                "===Cart===", JOptionPane.QUESTION_MESSAGE, null, cartOptions,
                null);
        // how to get selected cart choice from GUI into code?
        int cartOption = readNumberOption(s, 3);

        boolean status = false;
        switch (cartOption) {
            case 1:
                status = m.checkoutCart();
                break;
            case 2:
                choice = (String) JOptionPane.showInputDialog(null, "Which item would you " +
                                "like to remove?", "===Cart===", JOptionPane.QUESTION_MESSAGE, null,
                        new List[]{cart}, null);
                // how to get deleted item from GUI into code?
                int deletionIndex = readNumberOption(s, cart.size()) - 1;
                status = true;
                m.deleteItemFromCart(cart.get(deletionIndex));
                break;
            case 3:
                status = true;
                break;
        }
        if (status == false) {
            JOptionPane.showMessageDialog(null, "Unable to completely perform operation!",
                    "===Cart===", JOptionPane.ERROR_MESSAGE);
        } else {
            JOptionPane.showMessageDialog(null, "Done!", "===Cart===",
                    JOptionPane.PLAIN_MESSAGE);
        }
    }

    public static void shopFromProducts(Scanner s, Marketplace m, List<Product> storeProducts) { // GUI done
        String choice;
        choice = (String) JOptionPane.showInputDialog(null, "Select a product.",
                "===Products===", JOptionPane.QUESTION_MESSAGE, null, new List[]{storeProducts},
                null);
        int productIndex = readNumberOption(s, storeProducts.size()) - 1;
        Product p = storeProducts.get(productIndex);

        String[] productOptions = {"1. Purchase now", "2. Add to cart", "3. Cancel operation"};
        choice = (String) JOptionPane.showInputDialog(null, "Select an option to preform!",
                "===Products===", JOptionPane.QUESTION_MESSAGE, null, productOptions,
                null);
        // how to get selected cart choice from GUI into code?
        int purchaseOption = readNumberOption(s, 3);

        boolean status = false;
        switch (purchaseOption) {
            case 1:
                status = m.buyNow(p);
                break;
            case 2:
                status = m.addToCart(p);
                break;
            case 3:
                status = true;
                break;
        }
        if (status == false) {
            JOptionPane.showMessageDialog(null, "Unable to completely perform operation!",
                    "===Products===", JOptionPane.ERROR_MESSAGE);
        } else {
            JOptionPane.showMessageDialog(null, "Done!", "===Products===",
                    JOptionPane.PLAIN_MESSAGE);
        }
    }

    public static Marketplace loadMarketplace() { // no GUI
        Marketplace m = null;
        try {
            FileInputStream fileIn = new FileInputStream("./MarketplaceState.ser");
            ObjectInputStream in = new ObjectInputStream(fileIn);
            m = (Marketplace) in.readObject();
            in.close();
            fileIn.close();
            return m;
        } catch (Exception e) {
            return m;
        }
    }

    public static void saveMarketplace(Marketplace m) { // no GUI
        try {
            FileOutputStream fileOut = new FileOutputStream("./MarketplaceState.ser");
            ObjectOutputStream out = new ObjectOutputStream(fileOut);
            out.writeObject(m);
            out.close();
            fileOut.close();
        } catch (Exception e) {
            // nothing
        }
    }
}
