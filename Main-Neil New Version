import javax.swing.*;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.util.Scanner;
import java.util.*;

public class Main {

    public static void main(String[] args) {
        Marketplace marketplace = loadMarketplace();
        if (marketplace == null) {
            marketplace = new Marketplace();
        }
        Scanner scanner = new Scanner(System.in);  // Create a Scanner object
        while (startUserInput(scanner, marketplace)) ;
        saveMarketplace(marketplace);
    }

    public static boolean startUserInput(Scanner s, Marketplace m) {

        //making it a GUI
        JOptionPane.showMessageDialog(null, "Welcome to Coffee Shop MarketPlace!",
                "Coffee Shop MarketPlace", JOptionPane.PLAIN_MESSAGE);


        boolean status = signupOrLogin(s, m);
        if (status == false)
            return false;
        if (m.isLoggedInUserSeller()) {
            runSellerHandler(s, m);
        } else {
            runCustomerHandler(s, m);
        }
        return true;
    }

    public static boolean signupOrLogin(Scanner s, Marketplace m) {
        String newUserPromptInput = "";

        //do-while makes sure they answer when prompted
        do {
            newUserPromptInput = JOptionPane.showInputDialog(null, "Let's get started! Are you " +
                            "a new user? [yes/no/quit]",
                    "Coffee Shop MarketPlace", JOptionPane.QUESTION_MESSAGE);
            if ((newUserPromptInput == null) || (newUserPromptInput.isEmpty())) {
                JOptionPane.showMessageDialog(null, "Please answer!", "Coffee Shop MarketPlace",
                        JOptionPane.ERROR_MESSAGE);

            } //end if
        } while ((newUserPromptInput == null) || (newUserPromptInput.isEmpty()));

        if (newUserPromptInput.equals("quit"))
            return false;

        if (newUserPromptInput.equals("yes")) {
            boolean signupComplete = false;
            String username, password, email, isSellerStr;
            while (signupComplete == false) {
                //enter username
                do {
                    username = JOptionPane.showInputDialog(null, "Please enter a " +
                                    "username?",
                            "Coffee Shop MarketPlace", JOptionPane.QUESTION_MESSAGE);
                    if ((username == null) || (username.isEmpty())) {
                        JOptionPane.showMessageDialog(null, "Please answer!", "Coffee Shop MarketPlace",
                                JOptionPane.ERROR_MESSAGE);

                    } //end if
                } while ((username == null) || (username.isEmpty()));


                //enter password
                do {
                    password = JOptionPane.showInputDialog(null, "Please enter a password:",
                            "Coffee Shop MarketPlace", JOptionPane.QUESTION_MESSAGE);
                    if ((password == null) || (password.isEmpty())) {
                        JOptionPane.showMessageDialog(null, "Please answer!", "Coffee " +
                                        "Shop MarketPlace",
                                JOptionPane.ERROR_MESSAGE);

                    } //end if
                } while ((password == null) || (password.isEmpty()));


                //enter email
                do {
                    email = JOptionPane.showInputDialog(null, "Please enter an email:",
                            "Coffee Shop MarketPlace", JOptionPane.QUESTION_MESSAGE);
                    if ((email == null) || (email.isEmpty())) {
                        JOptionPane.showMessageDialog(null, "Please answer!", "Coffee " +
                                        "Shop MarketPlace",
                                JOptionPane.ERROR_MESSAGE);

                    } //end if
                } while ((email == null) || (email.isEmpty()));


                //enter seller
                do {
                    isSellerStr = JOptionPane.showInputDialog(null, "Are you a seller?",
                            "Coffee Shop MarketPlace", JOptionPane.QUESTION_MESSAGE);
                    if ((isSellerStr == null) || (isSellerStr.isEmpty())) {
                        JOptionPane.showMessageDialog(null, "Please answer!", "Coffee " +
                                        "Shop MarketPlace",
                                JOptionPane.ERROR_MESSAGE);

                    } //end if
                } while ((isSellerStr == null) || (isSellerStr.isEmpty()));

                boolean isSeller = false;
                if (isSellerStr.equals("yes")) {
                    isSeller = true;
                }
                signupComplete = m.createAccount(username, password, email, isSeller);
            }
        } else {
            boolean loginComplete = false;
            String username, password;
            while (loginComplete == false) {

                //enter username
                do {
                    username = JOptionPane.showInputDialog(null, "Enter a username:",
                            "Coffee Shop MarketPlace", JOptionPane.QUESTION_MESSAGE);
                    if ((username == null) || (username.isEmpty())) {
                        JOptionPane.showMessageDialog(null, "Please answer!", "Coffee " +
                                        "Shop MarketPlace",
                                JOptionPane.ERROR_MESSAGE);

                    } //end if
                } while ((username == null) || (username.isEmpty()));


                //enter password
                do {
                    password = JOptionPane.showInputDialog(null, "Enter a password:",
                            "Coffee Shop MarketPlace", JOptionPane.QUESTION_MESSAGE);
                    if ((password == null) || (password.isEmpty())) {
                        JOptionPane.showMessageDialog(null, "Please answer!", "Coffee " +
                                        "Shop MarketPlace",
                                JOptionPane.ERROR_MESSAGE);

                    } //end if
                } while ((password == null) || (password.isEmpty()));

                loginComplete = m.attemptLogin(username, password);
            }
        }
        return true;
    }

    //need to do
    public static int readNumberOption(Scanner s, int max) {
        String inputStr = "";
        int input = 0;

        //old proj4 code

//        while (input <= 0 || input > max) {
//            //while the next value is not an int
//            while (!s.hasNextInt()) {
//                s.nextLine();
//                System.out.println("Please enter a valid number!");
//            }
//            input = s.nextInt();
//            s.nextLine();
//        }
//        return input;

        while (input <= 0 || input > max) {
            //while the next value is not an int
            do {
                inputStr = JOptionPane.showInputDialog(null, "Please enter a valid number!",
                        "Coffee Shop MarketPlace", JOptionPane.QUESTION_MESSAGE);
                input = Integer.parseInt(inputStr);
            } while (input != (int) input);
        }
        return input;

    }

    //need to do
    public static boolean promptDecending(Scanner s) {
        System.out.println("Choose an option");
        System.out.println("1. Ascending");
        System.out.println("2. Descending");
        int option = readNumberOption(s, 2);
        return option == 2;
    }

    public static void runSellerHandler(Scanner s, Marketplace m) {

        JOptionPane.showMessageDialog(null, "Welcome seller: " + m.getLoggedInUsername(),
                "Coffee Shop MarketPlace", JOptionPane.PLAIN_MESSAGE);

        String[] sellerOptions = {"1. Create new store", "2. View or modify your stores",
                "3. Dashboard of sale count by customer", "4. Dashboard of sale count by product", "5. Log out"};
        String choice = "";
        boolean isActive = true;
        while (isActive) {

            choice = (String) JOptionPane.showInputDialog(null, "Select an option to perform!",
                    "Coffee Shop MarketPlace", JOptionPane.QUESTION_MESSAGE, null, sellerOptions,
                    null);

            int choiceNum = Integer.parseInt(choice);

            //not going into?
            switch (choiceNum) {
                case 1:
                    System.out.println("Working!");
                    createStore(s, m);
                    break;
                case 2:
                    modifyStore(s, m);
                    break;
                case 3:
                    System.out.print(m.dashboardCustomerNumSales(promptDecending(s)));
                    break;
                case 4:
                    System.out.print(m.dashboardProductNumSales(promptDecending(s)));
                    break;
                case 5:
                    isActive = false;
                    break;
            }
        }

    }

    public static void createStore(Scanner s, Marketplace m) {

        String storeName;

        do {
            storeName = JOptionPane.showInputDialog(null, "Enter Store Name:",
                    "Coffee Shop MarketPlace", JOptionPane.QUESTION_MESSAGE);
            if ((storeName == null) || (storeName.isEmpty())) {
                JOptionPane.showMessageDialog(null, "Please answer!", "Coffee " +
                                "Shop MarketPlace",
                        JOptionPane.ERROR_MESSAGE);

            } //end if
        } while ((storeName == null) || (storeName.isEmpty()));

        boolean status = m.createStore(storeName);
        if (status) {
            JOptionPane.showMessageDialog(null, "Store Created!",
                    "Coffee Shop MarketPlace", JOptionPane.PLAIN_MESSAGE);
        } else {
            JOptionPane.showMessageDialog(null, "Store name in use!",
                    "Coffee Shop MarketPlace", JOptionPane.PLAIN_MESSAGE);
        }
    }

    //need to do
    public static void modifyStore(Scanner s, Marketplace m) {
        List<Store> stores = m.listStoresForSeller();
        System.out.println("===Your Stores===");
        for (int i = 0; i < stores.size(); i++) {
            System.out.println((i + 1) + ". " + stores.get(i).getName());
        }

        System.out.println("Select store to view or modify");
        int storeIndex = readNumberOption(s, stores.size()) - 1;
        Store store = stores.get(storeIndex);

        System.out.println("Choose an option");
        System.out.println("1. List sales");
        System.out.println("2. Create new product");
        System.out.println("3. List/Modify existing products"); //-> delete, edit
        System.out.println("4. Dashboard of revenue by customer");
        System.out.println("5. Export products as csv.");
        System.out.println("6. Import products as csv.");
        int promptChoice = readNumberOption(s, 6);

        switch (promptChoice) {
            case 1:
                listSales(store);
                break;
            case 2:
                createNewProduct(s, m, store);
                break;
            case 3:
                modifyProducts(s, m, store);
                break;
            case 4:
                System.out.println(m.customerRevenueSaleList(store));
                break;
            case 5:
                System.out.println("Enter export filepath.");
                System.out.println(m.exportProductList(store, s.nextLine()));
                break;
            case 6:
                System.out.println("Enter import filepath.");
                boolean status = m.importProductList(store, s.nextLine());
                if (status == false) {
                    System.out.println("Failed to import all products");
                } else {
                    System.out.println("Done!");
                }
                break;
        }
    }

    public static void listSales(Store store) {
        List<Sale> sales = store.getSales();
        System.out.println("===Sales===");
        for (int i = 0; i < sales.size(); i++) {
            System.out.println((i + 1) + ". " + sales.get(i));
        }
    }

    public static void createNewProduct(Scanner s, Marketplace m, Store store) {
        String name, milkType, coffeeType, syrup, special;
        int price, quantity;

        System.out.println("Please enter a name:");
        name = s.nextLine();
        System.out.println("Please enter a milk type:");
        milkType = s.nextLine();
        System.out.println("Please enter a coffee type:");
        coffeeType = s.nextLine();
        System.out.println("Please enter a new syrup:");
        syrup = s.nextLine();
        System.out.println("Please enter the specials:");
        special = s.nextLine();
        System.out.println("Please enter the price as an integer:");
        price = readNumberOption(s, Integer.MAX_VALUE);
        System.out.println("Please enter the quantity as an integer:");
        quantity = readNumberOption(s, Integer.MAX_VALUE);

        boolean status = m.createProduct(store, name, milkType, coffeeType, syrup, special, price, quantity);
        if (status == false) {
            System.out.println("Name already exists in store");
        } else {
            System.out.println("Done!");
        }
    }

    public static void modifyProducts(Scanner s, Marketplace m, Store store) {
        List<Product> products = m.listProducts(store);
        System.out.println("===Products===");
        for (int i = 0; i < products.size(); i++) {
            System.out.println((i + 1) + ". " + products.get(i).toExport());
        }

        System.out.println("Which product to modify?");
        int productIndex = readNumberOption(s, products.size()) - 1;
        Product p = products.get(productIndex);

        System.out.println("Choose an option");
        System.out.println("1. Edit product");
        System.out.println("2. Delete product");
        System.out.println("3. Cancel operation");
        int productOption = readNumberOption(s, 3);

        boolean status = false;
        switch (productOption) {
            case 1:
                String name, milkType, coffeeType, syrup, special;
                int price, quantity;

                System.out.println("Please enter a new name:");
                name = s.nextLine();
                System.out.println("Please enter a new milk type:");
                milkType = s.nextLine();
                System.out.println("Please enter a new coffee type:");
                coffeeType = s.nextLine();
                System.out.println("Please enter a new syrup:");
                syrup = s.nextLine();
                System.out.println("Please enter the new specials:");
                special = s.nextLine();
                System.out.println("Please enter the price as an integer:");
                price = readNumberOption(s, Integer.MAX_VALUE);
                System.out.println("Please enter the quantity as an integer:");
                quantity = readNumberOption(s, Integer.MAX_VALUE);

                status = m.editProduct(p, name, milkType, coffeeType, syrup, special, price, quantity);
                break;
            case 2:
                m.removeProduct(p);
                status = true;
                break;
            case 3:
                status = true;
                break;
        }
        if (status == false) {
            System.out.println("Unable to completely perform operation!");
        } else {
            System.out.println("Done!");
        }
    }

    public static void runCustomerHandler(Scanner s, Marketplace m) {
        System.out.println("Welcome customer: " + m.getLoggedInUsername());
        boolean isActive = true;

        while (isActive) {
            System.out.println("Select an option to perform!");
            System.out.println("1. List all stores");
            System.out.println("2. Search for product");
            System.out.println("3. View cart");
            System.out.println("4. Dashboard of sales count by store");
            System.out.println("5. Dashboard of purchases by store");
            System.out.println("6. Export csv dashboard of purchases by store");
            System.out.println("7. Log out");
            int promptChoice = readNumberOption(s, 7);
            switch (promptChoice) {
                case 1:
                    listAllStores(s, m);
                    break;
                case 2:
                    searchForProduct(s, m);
                    break;
                case 3:
                    viewCart(s, m);
                    break;
                case 4:
                    System.out.println(m.dashboardSaleCounterByStore(promptDecending(s)));
                    break;
                case 5:
                    System.out.println(m.dashboardPurchasesByStore(promptDecending(s)));
                    break;
                case 6:
                    System.out.println("Enter export filepath.");
                    m.exportDashboardPurchasesByStore(s.nextLine());
                    break;
                case 7:
                    isActive = false;
                    break;
            }
        }
    }

     public static void listAllStores(Scanner s, Marketplace m) {
        List<Store> stores = m.listAllStores();
        String store = "";
        store = (String) JOptionPane.showInputDialog(null, "Select a store to view products.",
                "===Stores===", JOptionPane.QUESTION_MESSAGE, null, new List[]{stores},
                null);
        // how to get selected store value from GUI into code?
        int storeIndex = readNumberOption(s, stores.size()) - 1;
        if (storeIndex >= stores.size()) return;

        List<Product> storeProducts = m.viewProducts(stores.get(storeIndex));
        shopFromProducts(s, m, storeProducts);
    }

    public static void searchForProduct(Scanner s, Marketplace m) { // GUI compete & functioning
        String searchTerm;
        do {
            searchTerm = JOptionPane.showInputDialog(null, "Enter search criteria.",
                    "Coffee Shop MarketPlace", JOptionPane.QUESTION_MESSAGE);
            if ((searchTerm == null) || (searchTerm.isEmpty())) {
                JOptionPane.showMessageDialog(null, "Please answer!", "Coffee Shop " +
                                "MarketPlace",
                        JOptionPane.ERROR_MESSAGE);
            } //end if
        } while ((searchTerm == null) || (searchTerm.isEmpty()));
            
        List<Product> storeProducts = m.searchProducts(searchTerm);
        shopFromProducts(s, m, storeProducts);
    }

    public static void viewCart(Scanner s, Marketplace m) {
        List<Product> cart = m.viewCart();

        JOptionPane.showMessageDialog(null, "Current cart: " + cart,
                "===Cart===", JOptionPane.PLAIN_MESSAGE); // show cart, user clicks "ok"

        String[] cartOptions = {"1. Checkout", "2. Delete from cart", "3. Cancel operation"};
        String choice;
        choice = (String) JOptionPane.showInputDialog(null, "Select an option to preform!",
                "===Cart===", JOptionPane.QUESTION_MESSAGE, null, cartOptions,
                null);
        // how to get selected cart choice from GUI into code?
        int cartOption = readNumberOption(s, 3);

        boolean status = false;
        switch (cartOption) {
            case 1:
                status = m.checkoutCart();
                break;
            case 2:
                choice = (String) JOptionPane.showInputDialog(null, "Which item would you " +
                                "like to remove?", "===Cart===", JOptionPane.QUESTION_MESSAGE, null,
                        new List[]{cart}, null);
                // how to get deleted item from GUI into code?
                int deletionIndex = readNumberOption(s, cart.size()) - 1;
                status = true;
                m.deleteItemFromCart(cart.get(deletionIndex));
                break;
            case 3:
                status = true;
                break;
        }
        if (status == false) {
            JOptionPane.showMessageDialog(null, "Unable to completely perform operation!",
                    "===Cart===", JOptionPane.ERROR_MESSAGE);
        } else {
            JOptionPane.showMessageDialog(null, "Done!", "===Cart===",
                    JOptionPane.PLAIN_MESSAGE);
        }
    }

    public static void shopFromProducts(Scanner s, Marketplace m, List<Product> storeProducts) { // Kate GUI
        String choice;
        choice = (String) JOptionPane.showInputDialog(null, "Select a product.",
                "===Products===", JOptionPane.QUESTION_MESSAGE, null, new List[]{storeProducts},
                null);
        int productIndex = readNumberOption(s, storeProducts.size()) - 1;
        Product p = storeProducts.get(productIndex);

        String[] productOptions = {"1. Purchase now", "2. Add to cart", "3. Cancel operation"};
        choice = (String) JOptionPane.showInputDialog(null, "Select an option to preform!",
                "===Products===", JOptionPane.QUESTION_MESSAGE, null, productOptions,
                null);
        // how to get selected cart choice from GUI into code?
        int purchaseOption = readNumberOption(s, 3);

        boolean status = false;
        switch (purchaseOption) {
            case 1:
                status = m.buyNow(p);
                break;
            case 2:
                status = m.addToCart(p);
                break;
            case 3:
                status = true;
                break;
        }
        if (status == false) {
            JOptionPane.showMessageDialog(null, "Unable to completely perform operation!",
                    "===Products===", JOptionPane.ERROR_MESSAGE);
        } else {
            JOptionPane.showMessageDialog(null, "Done!", "===Products===",
                    JOptionPane.PLAIN_MESSAGE);
        }
    }

    public static Marketplace loadMarketplace() {
        Marketplace m = null;
        try {
            FileInputStream fileIn = new FileInputStream("./MarketplaceState.ser");
            ObjectInputStream in = new ObjectInputStream(fileIn);
            m = (Marketplace) in.readObject();
            in.close();
            fileIn.close();
            return m;
        } catch (Exception e) {
            return m;
        }
    }

    public static void saveMarketplace(Marketplace m) {
        try {
            FileOutputStream fileOut = new FileOutputStream("./MarketplaceState.ser");
            ObjectOutputStream out = new ObjectOutputStream(fileOut);
            out.writeObject(m);
            out.close();
            fileOut.close();
        } catch (Exception e) {
            // nothing
        }
    }
}
