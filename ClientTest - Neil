import javax.swing.*;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.util.List;
import java.util.Scanner;
import javax.swing.JOptionPane;
import javax.swing.JFrame;
import java.util.*;

public class ClientTest implements Runnable {
    public static void main(String[] args) {
        MarketplaceClient marketplace = new MarketplaceClient();

        Scanner scanner = new Scanner(System.in);  // Create a Scanner object
        while (startUserInput(scanner, marketplace)) ;
        marketplace.killServer();
    }

    public static boolean startUserInput(Scanner s, MarketplaceClient m) {
        JOptionPane.showMessageDialog(null, "Welcome to Coffee Shop MarketPlace!",
                "Coffee Shop MarketPlace", JOptionPane.PLAIN_MESSAGE);

        boolean status = signupOrLogin(s, m);
        if (status == false)
            return false;
        if (m.isLoggedInUserSeller()) {
            runSellerHandler(s, m);
        } else {
            runCustomerHandler(s, m);
        }
        return true;
    }

    public static boolean signupOrLogin(Scanner s, MarketplaceClient m) {
        String newUserPromptInput = "";
        do {
            newUserPromptInput = JOptionPane.showInputDialog(null, "Let's get started! Are " +
                            "you a new user? [yes/no/quit]", "Coffee Shop MarketPlace",
                    JOptionPane.QUESTION_MESSAGE);
            if (newUserPromptInput == null) {
                saveMarketplace(m);
                System.exit(0);

            } else if (newUserPromptInput.isEmpty()) {
                JOptionPane.showMessageDialog(null, "Please answer!", "Coffee Shop " +
                        "MarketPlace", JOptionPane.ERROR_MESSAGE);
            }
        } while ((newUserPromptInput == null) || (newUserPromptInput.isEmpty()));

        if (newUserPromptInput.equals("quit"))
            return false;

        if (newUserPromptInput.equals("yes")) {
            boolean signupComplete = false;
            String username, password, email, isSellerStr;
            while (!signupComplete) {

                boolean badUsername = false;
                do { // enter username
                    username = JOptionPane.showInputDialog(null, "Please create a username!\nNote: Username must contain at least one letter and one number.",
                            "Coffee Shop MarketPlace", JOptionPane.QUESTION_MESSAGE);
                    if ((username == null)) {
                        saveMarketplace(m);
                        System.exit(0);
                        badUsername = true;
                    } else if (username.isEmpty()) {
                        JOptionPane.showMessageDialog(null, "Please answer!", "Coffee " +
                                "Shop MarketPlace", JOptionPane.ERROR_MESSAGE);
                        badUsername = true;
                    } else {
                        boolean hasLetter = false;
                        boolean hasNumber = false;
                        for (int i = 0; i < username.length(); i++) { // traverse length of given username
                            if (Character.isDigit(username.charAt(i))) { // check for at least one number
                                hasNumber = true;
                            }
                            if (Character.isLetter(username.charAt(i))) { // check for at least one letter
                                hasLetter = true;
                            }
                        }

                        if (hasNumber && hasLetter) {
                            boolean alreadyTaken = false;


                            if (alreadyTaken) {
                                JOptionPane.showMessageDialog(null, "I'm sorry, that" +
                                        " username is already taken :(", "Coffee " +
                                        "Shop MarketPlace", JOptionPane.ERROR_MESSAGE);
                                badUsername = true;
                            } else {
                                JOptionPane.showMessageDialog(null, "Thank you for creating " +
                                        "a valid username :)", "Coffee " +
                                        "Shop MarketPlace", JOptionPane.PLAIN_MESSAGE);
                                System.out.println();
                                badUsername = false;
                            }
                        } else if (hasNumber) {
                            JOptionPane.showMessageDialog(null, "Username is missing a " +
                                    "letter. Please try again.", "Coffee " +
                                    "Shop MarketPlace", JOptionPane.ERROR_MESSAGE);
                            badUsername = true;
                        } else if (hasLetter) {
                            JOptionPane.showMessageDialog(null, "Username is missing a " +
                                    "number. Please try again.", "Coffee " +
                                    "Shop MarketPlace", JOptionPane.ERROR_MESSAGE);
                            badUsername = true;
                        } else {
                            JOptionPane.showMessageDialog(null, "Username is missing a " +
                                    "letter and a number. Please try again.", "Coffee " +
                                    "Shop MarketPlace", JOptionPane.ERROR_MESSAGE);
                            badUsername = true;
                        }
                    }
                } while (badUsername);

                boolean badPassword;
                do { // enter password
                    password = JOptionPane.showInputDialog(null, "Please enter a password!" +
                                    "\nNote: Must contain at least six digits. Must contain at least one letter " +
                                    "and one number.",
                            "Coffee Shop MarketPlace", JOptionPane.QUESTION_MESSAGE);
                    if (password == null) {
                        saveMarketplace(m);
                        System.exit(0);
                        badPassword = true;
                    } else if (password.isEmpty()) {
                        JOptionPane.showMessageDialog(null, "Please answer!", "Coffee " +
                                        "Shop MarketPlace",
                                JOptionPane.ERROR_MESSAGE);
                        badPassword = true;
                    } else {
                        if (password.length() < 6) {
                            JOptionPane.showMessageDialog(null, "Password is too short. " +
                                            "Please try again.", "Coffee " +
                                            "Shop MarketPlace",
                                    JOptionPane.ERROR_MESSAGE);
                            badPassword = true;
                        } else { // password is longer than 6 characters
                            boolean hasLetter = false;
                            boolean hasNumber = false;
                            for (int i = 0; i < password.length(); i++) { // traverse length of given username
                                if (Character.isDigit(password.charAt(i))) { // check for at least one number
                                    hasNumber = true;
                                }
                                if (Character.isLetter(password.charAt(i))) { // check for at least one letter
                                    hasLetter = true;
                                }
                            }

                            if (hasNumber && hasLetter) {
                                JOptionPane.showMessageDialog(null, "Thank you for creating " +
                                                "a valid password :)", "Coffee " +
                                                "Shop MarketPlace",
                                        JOptionPane.PLAIN_MESSAGE);
                                badPassword = false;
                            } else if (hasNumber) {
                                JOptionPane.showMessageDialog(null, "Password is missing " +
                                        "a letter. Please try again.", "Coffee " +
                                        "Shop MarketPlace", JOptionPane.ERROR_MESSAGE);
                                badPassword = true;
                            } else if (hasLetter) {
                                JOptionPane.showMessageDialog(null, "Password is missing " +
                                        "a number. Please try again.", "Coffee " +
                                        "Shop MarketPlace", JOptionPane.ERROR_MESSAGE);
                                badPassword = true;
                            } else {
                                JOptionPane.showMessageDialog(null, "Password is missing " +
                                        "a letter and a number. Please try again.", "Coffee " +
                                        "Shop MarketPlace", JOptionPane.ERROR_MESSAGE);
                                badPassword = true;
                            }
                        }
                    }
                } while (badPassword);

                boolean badEmail;
                do { //enter email
                    email = JOptionPane.showInputDialog(null, "Please enter an email:",
                            "Coffee Shop MarketPlace", JOptionPane.QUESTION_MESSAGE);
                    if (email == null) {
                        saveMarketplace(m);
                        System.exit(0);
                        badEmail = true;
                    } else if (email.isEmpty()) {
                        JOptionPane.showMessageDialog(null, "Please answer!", "Coffee " +
                                        "Shop MarketPlace",
                                JOptionPane.ERROR_MESSAGE);
                        badEmail = true;
                    } else {
                        boolean hasAtSign = false;
                        boolean hasDot = false;

                        for (int i = 0; i < email.length(); i++) { // traverse length of given username
                            if (email.charAt(i) == 64) { // check for an @ sign, referencing an ascii table
                                hasAtSign = true;
                            }
                            if (hasAtSign && (email.charAt(i) == 46)) { // check for a .extension, referencing an
                                // ascii table
                                hasDot = true;
                            }
                        }

                        if (hasAtSign && hasDot) {
                            boolean alreadyTaken = false;


                            if(Marketplace.users != null) {
                                for (int i = 0; i < Marketplace.users.size(); i++) {
                                    if (username.equals(Marketplace.users.get(i).getUsername())) {
                                        alreadyTaken = true;
                                        break;
                                    }
                                }
                            }

                            if (alreadyTaken) {
                                JOptionPane.showMessageDialog(null, "It appears that email " +
                                                "is already being used.\nPlease try a different email or login " +
                                                "instead.\n", "Coffee " +
                                                "Shop MarketPlace",
                                        JOptionPane.ERROR_MESSAGE);
                                badEmail = true;
                            } else {
                                JOptionPane.showMessageDialog(null, "Thank you for inputting" +
                                                " a valid email :)", "Coffee " +
                                                "Shop MarketPlace",
                                        JOptionPane.PLAIN_MESSAGE);
                                badEmail = false;
                            }
                        } else if (hasAtSign) {
                            JOptionPane.showMessageDialog(null, "Email is missing a valid " +
                                            "extension at the end.\nExample: .com", "Coffee " +
                                            "Shop MarketPlace",
                                    JOptionPane.ERROR_MESSAGE);
                            badEmail = true;
                        } else {
                            JOptionPane.showMessageDialog(null, "Email is improperly " +
                                            "formatted.\nPlease ensure it includes an @ sign, and a valid " +
                                            "extension (such as .com) at the end.", "Coffee " +
                                            "Shop MarketPlace",
                                    JOptionPane.ERROR_MESSAGE);
                            badEmail = true;
                        }
                    }
                } while (badEmail);

                do { //enter seller
                    isSellerStr = JOptionPane.showInputDialog(null, "Are you a seller? " +
                                    "[yes/no]",
                            "Coffee Shop MarketPlace", JOptionPane.QUESTION_MESSAGE);
                    if (isSellerStr == null) {
                        saveMarketplace(m);
                        System.exit(0);
                    } else if (isSellerStr.isEmpty()) {
                        JOptionPane.showMessageDialog(null, "Please answer!", "Coffee " +
                                        "Shop MarketPlace",
                                JOptionPane.ERROR_MESSAGE);
                    } //end if
                } while ((isSellerStr == null) || (isSellerStr.isEmpty()));

                boolean isSeller = false;
                if (isSellerStr.equals("yes")) {
                    isSeller = true;
                }
                signupComplete = m.createAccount(username, password, email, isSeller);
                System.out.println(signupComplete);

            }
        } else {
            boolean loginComplete = false;
            String username, password;
            while (!loginComplete) {
                do { //enter username
                    username = JOptionPane.showInputDialog(null, "Enter your username:",
                            "Coffee Shop MarketPlace", JOptionPane.QUESTION_MESSAGE);
                    if (username == null) {
                        saveMarketplace(m);
                        System.exit(0);
                    } else if (username.isEmpty()) {
                        JOptionPane.showMessageDialog(null, "Please answer!", "Coffee " +
                                        "Shop MarketPlace",
                                JOptionPane.ERROR_MESSAGE);
                    } // end if
                } while ((username == null) || (username.isEmpty()));

                do { // enter password
                    password = JOptionPane.showInputDialog(null, "Enter your password:",
                            "Coffee Shop MarketPlace", JOptionPane.QUESTION_MESSAGE);
                    if (password == null) {
                        saveMarketplace(m);
                        System.exit(0);
                    } else if (password.isEmpty()) {
                        JOptionPane.showMessageDialog(null, "Please answer!", "Coffee " +
                                        "Shop MarketPlace",
                                JOptionPane.ERROR_MESSAGE);
                    } // end if
                } while ((password == null) || (password.isEmpty()));
                loginComplete = m.attemptLogin(username, password);
                if (!loginComplete) {
                    JOptionPane.showMessageDialog(null, "We could not find an account matching the provided information:(\nPlease try again!", "Coffee " +
                                    "Shop MarketPlace",
                            JOptionPane.ERROR_MESSAGE);
                }
            }
        }
        return true;
    }

    public static int readNumberOption(Scanner s, int max) { // GUI done
        String inputStr = "";
        int input = 0;

        while (input <= 0 || input > max) {
            //while the next value is not an int
            do {
                inputStr = JOptionPane.showInputDialog(null, "Please enter a valid number!",
                        "Coffee Shop MarketPlace", JOptionPane.QUESTION_MESSAGE);
                input = Integer.parseInt(inputStr);
            } while (input != (int) input);
        }
        return input;
    }

    public static void runSellerHandler(Scanner s, MarketplaceClient m) { // GUI done
        JOptionPane.showMessageDialog(null, "Welcome seller: " + m.getLoggedInUsername(),
                "Coffee Shop MarketPlace", JOptionPane.PLAIN_MESSAGE);
        String[] sellerOptions = {"1. Create new store", "2. View or modify your stores",
                "3. Dashboard of sale count by customer", "4. Dashboard of sale count by product", "5. Log out"};

        boolean isActive = true;
        while (isActive) {
            saveMarketplace(m);
            String choice = (String) JOptionPane.showInputDialog(null, "Select an option " +
                            "to perform!", "Coffee Shop MarketPlace", JOptionPane.QUESTION_MESSAGE,
                    null, sellerOptions, null);

            if (choice == null) {
                saveMarketplace(m);
                System.exit(0);
            }
            int choiceNum = Integer.parseInt(choice.substring(0, 1));
            switch (choiceNum) {
                case 1:
                    createStore(s, m);
                    break;
                case 2:
                    modifyStore(s, m);
                    break;
                case 3:
                    m.dashboardCustomerNumSalesVoid(promptDecending(s));
                    break;
                case 4:
                    m.dashboardProductNumSalesVoid(promptDecending(s));
                    break;
                case 5:
                    JOptionPane.showMessageDialog(null, "You are being logged out....", "Coffee Shop MarketPlace", JOptionPane.INFORMATION_MESSAGE);
                    isActive = false;
                    saveMarketplace(m);
                    break;
            }
        }
    }

    public static void createStore(Scanner s, MarketplaceClient m) { // GUI done
        String storeName;
        do {
            storeName = JOptionPane.showInputDialog(null, "Enter Store Name:",
                    "Coffee Shop MarketPlace", JOptionPane.QUESTION_MESSAGE);
            if (storeName == null) {
                saveMarketplace(m);
                System.exit(0);
            } else if (storeName.isEmpty()) {
                JOptionPane.showMessageDialog(null, "Please answer!", "Coffee " +
                                "Shop MarketPlace",
                        JOptionPane.ERROR_MESSAGE);
            } // end if
            //changed to just while isEmpty() (took out null condition)
        } while (storeName.isEmpty());

        boolean alreadyTaken = false;
        for (int i = 0; i < Marketplace.stores.size(); i++) {
            if (Marketplace.stores.get(i).getName().equals(storeName)) {
                alreadyTaken = true;
                break;
            }
        }

        if (!alreadyTaken) {
            boolean status = m.createStore(storeName);
            if (status) {
                JOptionPane.showMessageDialog(null, "Store Created!",
                        "Coffee Shop MarketPlace", JOptionPane.PLAIN_MESSAGE);
            } else {
                JOptionPane.showMessageDialog(null, "Store name in use!",
                        "Coffee Shop MarketPlace", JOptionPane.ERROR_MESSAGE);
            }
        } else {
            JOptionPane.showMessageDialog(null, "Store name in use!",
                    "Coffee Shop MarketPlace", JOptionPane.ERROR_MESSAGE);
        }
    }
    public static void modifyStore(Scanner s, MarketplaceClient m) { // GUI done
        List<Store> stores = m.listStoresForSeller();

        if (stores.isEmpty()) {
            JOptionPane.showMessageDialog(null, "You currently do not have any stores.\n Try making one!",
                    "Coffee Shop MarketPlace", JOptionPane.INFORMATION_MESSAGE);
        } else {
            String[] storeNames = new String[stores.size()];
            for (int i = 0; i < stores.size(); i++) {
                storeNames[i] = stores.get(i).getName();
            }

            String modifyingStore = (String) JOptionPane.showInputDialog(null, "Which store " +
                            "would you like to modify?", "===Your Stores===", JOptionPane.QUESTION_MESSAGE,
                    null, storeNames, null);

            int storeIndex = -1;
            for (int i = 0; i < stores.size(); i++) {
                if (modifyingStore.equals(stores.get(i).getName())) {
                    storeIndex = i;
                    break;
                }
            }
            Store store = stores.get(storeIndex);

            String[] modifyOptions = {"1. List Sales", "2. Create new product", "3. List/Modify existing products",
                    "4. Dashboard of revenue by customer", "5. Export products as csv.", "6. Import products as csv."};

            String choice = (String) JOptionPane.showInputDialog(null, "Select an option " +
                            "to perform!", "===Your Stores===", JOptionPane.QUESTION_MESSAGE, null,
                    modifyOptions, null);

            int choiceNum = Integer.parseInt(choice.substring(0, 1));
            switch (choiceNum) {
                case 1:
                    listSales(store);
                    break;
                case 2:
                    createNewProduct(s, m, store);
                    break;
                case 3:
                    modifyProducts(s, m, store);
                    break;
                case 4:
                    String output = m.customerRevenueSaleList(store);
                    JOptionPane.showMessageDialog(null, output,
                            "Coffee Shop MarketPlace", JOptionPane.PLAIN_MESSAGE);
                    break;
                case 5:
                    String filePath;
                    do {
                        filePath = JOptionPane.showInputDialog(null, "Enter export filepath.",
                                "===Your Stores===", JOptionPane.QUESTION_MESSAGE);
                        if (filePath == null) {
                            saveMarketplace(m);
                            System.exit(0);
                        } else if (filePath.isEmpty()) {
                            JOptionPane.showMessageDialog(null, "Please answer!",
                                    "Coffee Shop MarketPlace", JOptionPane.ERROR_MESSAGE);
                        } //end if

                        String results = m.exportProductList(store, filePath);
                        JOptionPane.showMessageDialog(null, "Done exporting product list!",
                                "Coffee Shop MarketPlace", JOptionPane.INFORMATION_MESSAGE);
                    } while (filePath.isEmpty());


                    break;
                case 6:
                    do {
                        filePath = JOptionPane.showInputDialog(null, "Enter import filepath.",
                                "===Your Stores===", JOptionPane.QUESTION_MESSAGE);
                        if (filePath == null) {
                            saveMarketplace(m);
                            System.exit(0);
                        } else if (filePath.isEmpty()) {
                            JOptionPane.showMessageDialog(null, "Please answer!",
                                    "Coffee Shop MarketPlace", JOptionPane.ERROR_MESSAGE);
                        } //end if
                    } while (filePath.isEmpty());

                    boolean status = m.importProductList(store, filePath);
                    if (!status) {
                        JOptionPane.showMessageDialog(null, "Failed to import all products.\nPlease ensure your file is properly formatted.",
                                "Coffee Shop MarketPlace", JOptionPane.ERROR_MESSAGE);
                    } else {
                        JOptionPane.showMessageDialog(null, "Products Imported Successfully!",
                                "Coffee Shop MarketPlace", JOptionPane.INFORMATION_MESSAGE);
                    }
                    break;
            }
        }
    }
    public static void listSales(Store store) { // GUI done, need to format sales?
        if (store.getSales().isEmpty()) {
            JOptionPane.showMessageDialog(null, "It appears you have no sales yet :(",
                    "Coffee Shop MarketPlace", JOptionPane.INFORMATION_MESSAGE);
        } else {
            String title = String.format("Sales for %s:\n", store.getName());
            String sales = "#1  " + store.getSales().get(0).toString();
            for (int i = 1; i < store.getSales().size(); i++) {
                sales += String.format("\n#%d  %s", (i + 1), store.getSales().get(i).toString());
            }

            JOptionPane.showMessageDialog(null, title + sales,
                    "===Sales===", JOptionPane.PLAIN_MESSAGE); // show sales, user clicks "ok"
        }
    }
    public static void createNewProduct(Scanner s, MarketplaceClient m, Store store) { // GUI done
        String name, milkType, coffeeType, syrup, special, priceString, quantityString;
        int price, quantity;
        do { // enter name
            name = JOptionPane.showInputDialog(null, "Please enter a name.",
                    "===Products===", JOptionPane.QUESTION_MESSAGE);
            if (name == null) {
                saveMarketplace(m);
                System.exit(0);
            } else if (name.isEmpty()) {
                JOptionPane.showMessageDialog(null, "Please answer!",
                        "===Products===", JOptionPane.ERROR_MESSAGE);
            } // end if
        } while (name.isEmpty());

        do { // enter milk type
            milkType = JOptionPane.showInputDialog(null, "Please enter a milk type.",
                    "===Products===", JOptionPane.QUESTION_MESSAGE);
            if (milkType == null) {
                saveMarketplace(m);
                System.exit(0);
            } else if (milkType.isEmpty()) {
                JOptionPane.showMessageDialog(null, "Please answer!",
                        "===Products===", JOptionPane.ERROR_MESSAGE);
            } // end if
        } while (milkType.isEmpty());

        do { // enter coffee type
            coffeeType = JOptionPane.showInputDialog(null, "Please enter a coffee type.",
                    "===Products===", JOptionPane.QUESTION_MESSAGE);
            if (coffeeType == null) {
                saveMarketplace(m);
                System.exit(0);
            } else if (coffeeType.isEmpty()) {
                JOptionPane.showMessageDialog(null, "Please answer!",
                        "===Products===", JOptionPane.ERROR_MESSAGE);
            } // end if
        } while (coffeeType.isEmpty());

        do { // enter syrup
            syrup = JOptionPane.showInputDialog(null, "Please enter a syrup.",
                    "===Products===", JOptionPane.QUESTION_MESSAGE);
            if (syrup == null) {
                saveMarketplace(m);
                System.exit(0);
            } else if (syrup.isEmpty()) {
                JOptionPane.showMessageDialog(null, "Please answer!",
                        "===Products===", JOptionPane.ERROR_MESSAGE);
            } // end if
        } while (syrup.isEmpty());

        do { // enter specials
            special = JOptionPane.showInputDialog(null, "Please enter the specials.",
                    "===Products===", JOptionPane.QUESTION_MESSAGE);
            if (special == null) {
                saveMarketplace(m);
                System.exit(0);
            } else if (special.isEmpty()) {
                JOptionPane.showMessageDialog(null, "Please answer!",
                        "===Products===", JOptionPane.ERROR_MESSAGE);
            } // end if
        } while (special.isEmpty());

        do { // enter price
            priceString = JOptionPane.showInputDialog(null, "Please enter a price as an " +
                    "integer.", "===Products===", JOptionPane.QUESTION_MESSAGE);
            if (priceString == null) {
                saveMarketplace(m);
                System.exit(0);
            } else if (priceString.isEmpty()) {
                JOptionPane.showMessageDialog(null, "Please answer!",
                        "===Products===", JOptionPane.ERROR_MESSAGE);
            } // end if
        } while (priceString.isEmpty());
        price = Integer.parseInt(priceString);

        do { // enter quantity
            quantityString = JOptionPane.showInputDialog(null, "Please enter a quantity as " +
                    "an integer.", "===Products===", JOptionPane.QUESTION_MESSAGE);
            if (quantityString == null) {
                saveMarketplace(m);
                System.exit(0);
            } else if (quantityString.isEmpty()) {
                JOptionPane.showMessageDialog(null, "Please answer!",
                        "===Products===", JOptionPane.ERROR_MESSAGE);
            } // end if
        } while (quantityString.isEmpty());
        quantity = Integer.parseInt(quantityString);

        boolean status = m.createProduct(store, name, milkType, coffeeType, syrup, special, price, quantity);
        if (!status) {
            JOptionPane.showMessageDialog(null, "Name already exists in store",
                    "===Products===", JOptionPane.ERROR_MESSAGE);
        } else {
            JOptionPane.showMessageDialog(null, "Done!",
                    "===Products===", JOptionPane.PLAIN_MESSAGE);
        }
    }

    public static void modifyProducts(Scanner s, MarketplaceClient m, Store store) { // GUI done, need to format products?
        List<Product> products = m.listProducts(store);
        if (products.isEmpty()) {
            JOptionPane.showMessageDialog(null, "You currently do not have any products in this store.\nTry making one!",
                    "Coffee Shop MarketPlace", JOptionPane.INFORMATION_MESSAGE);
        } else {
            String[] productNames = new String[products.size()];
            for (int i = 0; i < products.size(); i++) {
                productNames[i] = products.get(i).getName();
            }

            String modifyingProduct = (String) JOptionPane.showInputDialog(null, "Which product " +
                            "would you like to modify?", "===Products===", JOptionPane.QUESTION_MESSAGE,
                    null, productNames, null);

            int productIndex = -1;
            for (int i = 0; i < products.size(); i++) {
                if (modifyingProduct.equals(products.get(i).getName())) {
                    productIndex = i;
                    break;
                }
            }
            Product p = products.get(productIndex);

            String[] modifyOptions = {"1. Edit product", "2. Delete product", "3. Cancel operation"};

            String choice = (String) JOptionPane.showInputDialog(null, "Select an option " +
                            "to perform!", "===Products===", JOptionPane.QUESTION_MESSAGE,
                    null, modifyOptions, null);

            int choiceNum = Integer.parseInt(choice.substring(0, 1));
            boolean status = false;
            switch (choiceNum) {
                case 1:
                    String name, milkType, coffeeType, syrup, special, priceString, quantityString;
                    int price, quantity;
                    do { // enter new name
                        name = JOptionPane.showInputDialog(null, "Please enter a new name.",
                                "===Products===", JOptionPane.QUESTION_MESSAGE);
                        if (name == null) {
                            saveMarketplace(m);
                            System.exit(0);
                        } else if (name.isEmpty()) {
                            JOptionPane.showMessageDialog(null, "Please answer!",
                                    "===Products===", JOptionPane.ERROR_MESSAGE);
                        } // end if
                    } while (name.isEmpty());

                    do { // enter new milk type
                        milkType = JOptionPane.showInputDialog(null, "Please enter a new milk" +
                                " type.", "===Products===", JOptionPane.QUESTION_MESSAGE);
                        if (milkType == null) {
                            saveMarketplace(m);
                            System.exit(0);
                        } else if (milkType.isEmpty()) {
                            JOptionPane.showMessageDialog(null, "Please answer!",
                                    "===Products===", JOptionPane.ERROR_MESSAGE);
                        } // end if
                    } while (milkType.isEmpty());

                    do { // enter new coffee type
                        coffeeType = JOptionPane.showInputDialog(null, "Please enter a new coffee" +
                                " type.", "===Products===", JOptionPane.QUESTION_MESSAGE);
                        if (coffeeType == null) {
                            saveMarketplace(m);
                            System.exit(0);
                        } else if (coffeeType.isEmpty()) {
                            JOptionPane.showMessageDialog(null, "Please answer!",
                                    "===Products===", JOptionPane.ERROR_MESSAGE);
                        } // end if
                    } while (coffeeType.isEmpty());

                    do { // enter new syrup
                        syrup = JOptionPane.showInputDialog(null, "Please enter a new syrup.",
                                "===Products===", JOptionPane.QUESTION_MESSAGE);
                        if (syrup == null) {
                            saveMarketplace(m);
                            System.exit(0);
                        } else if (syrup.isEmpty()) {
                            JOptionPane.showMessageDialog(null, "Please answer!",
                                    "===Products===", JOptionPane.ERROR_MESSAGE);
                        } // end if
                    } while (syrup.isEmpty());

                    do { // enter new specials
                        special = JOptionPane.showInputDialog(null, "Please enter the new " +
                                        "specials.",
                                "===Products===", JOptionPane.QUESTION_MESSAGE);
                        if (special == null) {
                            saveMarketplace(m);
                            System.exit(0);
                        } else if (special.isEmpty()) {
                            JOptionPane.showMessageDialog(null, "Please answer!",
                                    "===Products===", JOptionPane.ERROR_MESSAGE);
                        } // end if
                    } while (special.isEmpty());

                    do { // enter new price
                        priceString = JOptionPane.showInputDialog(null, "Please enter a new " +
                                "price as an integer.", "===Products===", JOptionPane.QUESTION_MESSAGE);
                        if (priceString == null) {
                            saveMarketplace(m);
                            System.exit(0);
                        } else if (priceString.isEmpty()) {
                            JOptionPane.showMessageDialog(null, "Please answer!",
                                    "===Products===", JOptionPane.ERROR_MESSAGE);
                        } // end if
                    } while (priceString.isEmpty());
                    price = Integer.parseInt(priceString);

                    do { // enter new quantity
                        quantityString = JOptionPane.showInputDialog(null, "Please enter a new " +
                                "quantity as an integer.", "===Products===", JOptionPane.QUESTION_MESSAGE);
                        if (quantityString == null) {
                            saveMarketplace(m);
                            System.exit(0);
                        } else if (quantityString.isEmpty()) {
                            JOptionPane.showMessageDialog(null, "Please answer!",
                                    "===Products===", JOptionPane.ERROR_MESSAGE);
                        } // end if
                    } while (quantityString.isEmpty());
                    quantity = Integer.parseInt(quantityString);

                    status = m.editProduct(p, name, milkType, coffeeType, syrup, special, price, quantity);
                    break;
                case 2:
                    m.removeProduct(p);
                    status = true;
                    break;
                case 3:
                    status = true;
                    break;
            }
            if (!status) {
                JOptionPane.showMessageDialog(null, "Unable to perform operation :(\n Please try again.",
                        "===Products===", JOptionPane.ERROR_MESSAGE);
            } else {
                JOptionPane.showMessageDialog(null, "Done!",
                        "===Products===", JOptionPane.PLAIN_MESSAGE);
            }
        }
    }

    public static void runCustomerHandler(Scanner s, MarketplaceClient m) { // GUI done
        JOptionPane.showMessageDialog(null, "Welcome customer: " + m.getLoggedInUsername(),
                "Coffee Shop MarketPlace", JOptionPane.PLAIN_MESSAGE); // show username, user clicks "ok"

        boolean isActive = true;
        while (isActive) {
            saveMarketplace(m);
            String[] customerOptions = {"1. List all stores", "2. Search for product", "3. View cart", "4. Dashboard" +
                    " of sales count by store", "5. Dashboard of purchases by store", "6. Export csv dashboard of" +
                    " purchases by store", "7. Log out"};
            String choice = (String) JOptionPane.showInputDialog(null, "Select an option to " +
                            "perform!", "Coffee Shop MarketPlace", JOptionPane.QUESTION_MESSAGE, null,
                    customerOptions, null);
            int choiceNum = Integer.parseInt(choice.substring(0, 1));
            switch (choiceNum) {
                case 1:
                    Store store = listAllStores(s, m);
                    List<Product> products = store.getProducts();
                    shopFromProducts(s, m, products);
                    break;
                case 2:
                    searchForProduct(s, m);
                    break;
                case 3:
                    viewCart(s, m);
                    break;
                case 4:
                    String output = m.dashboardSaleCounterByStore(promptDecending(s));
                    JOptionPane.showMessageDialog(null, output,
                            "Coffee Shop MarketPlace", JOptionPane.PLAIN_MESSAGE);
                    break;
                case 5:
                    String output1 = m.dashboardPurchasesByStore(promptDecending(s));
                    JOptionPane.showMessageDialog(null, output1,
                            "Coffee Shop MarketPlace", JOptionPane.PLAIN_MESSAGE);
                    break;
                case 6:
                    String filePath;
                    do {
                        filePath = JOptionPane.showInputDialog(null, "Enter export filepath.",
                                "Coffee Shop MarketPlace", JOptionPane.QUESTION_MESSAGE);
                        if (filePath == null) {
                            saveMarketplace(m);
                            System.exit(0);
                        } else if (filePath.isEmpty()) {
                            JOptionPane.showMessageDialog(null, "Please answer!",
                                    "Coffee Shop MarketPlace", JOptionPane.ERROR_MESSAGE);
                        } //end if
                    } while (filePath.isEmpty());
                    m.exportDashboardPurchasesByStore(filePath);
                    break;
                case 7:
                    isActive = false;
                    saveMarketplace(m);
                    break;
            }
        }
    }

    public static Store listAllStores(Scanner s, MarketplaceClient m) { // GUI done
        List<Store> stores = m.listAllStores();
        String[] storeNames = new String[stores.size()];
        for (int i = 0; i < stores.size(); i++) {
            storeNames[i] = String.format("%d. %s", (i + 1), stores.get(i).getName());
        }

        String names = (String) JOptionPane.showInputDialog(null, "Select a store to view products.",
                "===Stores===", JOptionPane.QUESTION_MESSAGE, null, storeNames,
                null);

        int storeIndex = -1;
        for (int i = 0; i < stores.size(); i++) {
            if (names.equals(storeNames[i])) {
                storeIndex = i;
                break;
            }
        }
        return stores.get(storeIndex);
    }

    public static void searchForProduct(Scanner s, MarketplaceClient m) { // GUI done
        String searchTerm;
        do {
            searchTerm = JOptionPane.showInputDialog(null, "Enter search criteria.",
                    "===Stores===", JOptionPane.QUESTION_MESSAGE);
            if (searchTerm == null) {
                saveMarketplace(m);
                System.exit(0);
            } else if (searchTerm.isEmpty()) {
                JOptionPane.showMessageDialog(null, "Please answer!", "===Stores===",
                        JOptionPane.ERROR_MESSAGE);
            } //end if
        } while (searchTerm.isEmpty());

        List<Product> storeProducts = m.searchProducts(searchTerm);
        shopFromProducts(s, m, storeProducts);
    }

    public static void viewCart(Scanner s, MarketplaceClient m) { // GUI done
        List<Product> cart = m.viewCart();
        String[] cartRemovals = new String[cart.size()];

        String output = "";
        for (int i = 0; i < cart.size(); i++) {
            output += String.format("%s\n", cart.get(i).getName());
            cartRemovals[i] = cart.get(i).getName();
        }

        JOptionPane.showMessageDialog(null, "Current cart:\n" + output,
                "===Cart===", JOptionPane.PLAIN_MESSAGE); // show cart, user clicks "ok"

        String[] cartOptions = {"1. Checkout", "2. Delete from cart", "3. Cancel operation"};
        String choice;
        choice = (String) JOptionPane.showInputDialog(null, "Select an option to perform!",
                "===Cart===", JOptionPane.QUESTION_MESSAGE, null, cartOptions,
                null);

        int choiceNum = Integer.parseInt(choice.substring(0, 1));
        boolean status = false;
        switch (choiceNum) {
            case 1:
                status = m.checkoutCart();
                break;
            case 2:
                choice = (String) JOptionPane.showInputDialog(null, "Which item would you " +
                                "like to remove?", "===Cart===", JOptionPane.QUESTION_MESSAGE, null,
                        cartRemovals, null);

                int deletionIndex = -1;
                for (int i = 0; i < cart.size(); i++) {
                    if (choice.equals(cart.get(i).getName())) {
                        deletionIndex = i;
                    }
                }
                status = true;
                m.deleteItemFromCart(cart.get(deletionIndex));
                break;
            case 3:
                status = true;
                break;
        }
        if (status == false) {
            JOptionPane.showMessageDialog(null, "Unable to completely perform operation!",
                    "===Cart===", JOptionPane.ERROR_MESSAGE);
        } else {
            JOptionPane.showMessageDialog(null, "Done!", "===Cart===",
                    JOptionPane.PLAIN_MESSAGE);
        }
    }

    public static void shopFromProducts(Scanner s, MarketplaceClient m, List<Product> storeProducts) { // GUI done
        String[] productNames = new String[storeProducts.size()];
        for (int i = 0; i < storeProducts.size(); i++) {
            productNames[i] = String.format("%d. %s", (i + 1), storeProducts.get(i).getName());
        }

        String choice;
        choice = (String) JOptionPane.showInputDialog(null, "Select a product.",
                "===Products===", JOptionPane.QUESTION_MESSAGE, null, productNames,
                null);
        int productIndex = -1;
        for (int i = 0; i < storeProducts.size(); i++) {
            if (choice.equals(productNames[i])) {
                productIndex = i;
                break;
            }
        }
        Product p = storeProducts.get(productIndex);

        String[] productOptions = {"1. Purchase now", "2. Add to cart", "3. Cancel operation"};
        choice = (String) JOptionPane.showInputDialog(null, "Select an option to perform!",
                "===Products===", JOptionPane.QUESTION_MESSAGE, null, productOptions,
                null);
        int choiceNum = Integer.parseInt(choice.substring(0, 1));

        boolean status = false;
        switch (choiceNum) {
            case 1:
                status = m.buyNow(p);
                break;
            case 2:
                status = m.addToCart(p);
                break;
            case 3:
                status = true;
                break;
        }
        if (!status) {
            JOptionPane.showMessageDialog(null, "It appears this item is sold out :(\nSo sorry!",
                    "===Products===", JOptionPane.ERROR_MESSAGE);
        } else {
            JOptionPane.showMessageDialog(null, "Done!", "===Products===",
                    JOptionPane.PLAIN_MESSAGE);
        }
    }

    public static Marketplace loadMarketplace() { // no GUI
        Marketplace m = null;
        try {
            FileInputStream fileIn = new FileInputStream("./MarketplaceState.ser");
            ObjectInputStream in = new ObjectInputStream(fileIn);
            m = (Marketplace) in.readObject();
            in.close();
            fileIn.close();
            return m;
        } catch (Exception e) {
            return m;
        }
    }

    public static void saveMarketplace(MarketplaceClient m) { // no GUI
        try {
            FileOutputStream fileOut = new FileOutputStream("./MarketplaceState.ser");
            ObjectOutputStream out = new ObjectOutputStream(fileOut);
            out.writeObject(m);
            out.close();
            fileOut.close();
        } catch (Exception e) {
            // nothing
        }
    }
    public static boolean promptDecending(Scanner s) { // GUI done
        String[] decendingOptions = {"1. Ascending", "2. Descending"};

        String choice = (String) JOptionPane.showInputDialog(null, "Select an option " +
                        "to perform!", "Coffee Shop MarketPlace", JOptionPane.QUESTION_MESSAGE, null,
                decendingOptions, null);

        int option = Integer.parseInt(choice.substring(0, 1));
        return option == 2;
    }

    @Override
    public void run() {

    }
}
